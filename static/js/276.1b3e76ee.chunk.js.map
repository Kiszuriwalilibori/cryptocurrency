{"version":3,"file":"static/js/276.1b3e76ee.chunk.js","mappings":"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","sources":["components/BlueButton/BlueButton.tsx","hooks/useFetchHistoricalPrices.ts","hooks/useMessage.ts","hooks/useCheckApiKey.ts","hooks/useConfirm.ts","functions/createOptions.ts","hooks/useFetchListOfCryptos.ts","pages/SelectionPage/parts/BaseCurrencySelection/BaseCurrencySelectForm.tsx","pages/SelectionPage/parts/CryptoCurrencySelection/CryptoCurrencySelectForm.tsx","pages/SelectionPage/parts/Logo/Logo.tsx","HOCs/withLogo.tsx","pages/SelectionPage/SelectionPage.tsx","styles/styled.ts"],"sourcesContent":["import \"./_BlueButton.scss\";\r\n\r\ninterface Props {\r\n  classes?: string;\r\n  isEnabled?: boolean;\r\n  clickHandler?: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n  label?: string;\r\n}\r\n\r\nconst BlueButton = (props: Props) => {\r\n  const { classes = \"enabled\", isEnabled = true, clickHandler = () => {}, label = \"\" } = props;\r\n  const baseClassName = \"BlueButton\";\r\n\r\n  return (\r\n    <button className={`${baseClassName} ${classes}`} onClick={clickHandler} disabled={!isEnabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const showMessage = useMessage();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; \r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (data.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(data.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n    }\r\n  };\r\n  const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","import { useSnackbar } from \"notistack\";\r\n\r\nconst useMessage = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showMessage = {\r\n    info: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"info\" });\r\n    },\r\n\r\n    error: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"error\" });\r\n    },\r\n\r\n    success: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"success\" });\r\n    },\r\n\r\n    warning: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"warning\" });\r\n    },\r\n  };\r\n\r\n  return showMessage;\r\n};\r\n\r\nexport default useMessage;\r\n","import { useRef } from \"react\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useCheckApiKey = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const isAPIKeyAvailable = useRef(false);\r\n\r\n    if (!process.env.REACT_APP_API_KEY) {\r\n        showMessage.error(`No API key available for application`);\r\n    } else {\r\n        isAPIKeyAvailable.current = true;\r\n    }\r\n    return isAPIKeyAvailable.current;\r\n};\r\n\r\nexport default useCheckApiKey;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    currencyBase: BaseCurrency;\r\n    currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosen currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst useConfirmChoice = (props: Props) => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const navigate = useNavigate();\r\n    const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n    const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n    const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n    const confirmChoice = useCallback(() => {\r\n        setCurrencyBase(currencyBase);\r\n        setCurrencyCrypto(currencyCrypto);\r\n        if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pathToResults]);\r\n\r\n    return { confirmChoice, isEnabled };\r\n};\r\n\r\nexport default useConfirmChoice;\r\n","import { ApiResponse } from \"types\";\r\n/**\r\n * Takes response from list of all cryptos API and creates array with desired content\r\n * @param obj\r\n * @returns array with code, name and link to logo of all available cryptocurrencies\r\n */\r\nconst createOptions = (obj: ApiResponse) => {\r\n    const data = obj.data.Data;\r\n\r\n    const result = [];\r\n\r\n    for (let item in data) {\r\n        if (data.hasOwnProperty(item)) {\r\n            result.push({\r\n                value: item,\r\n                label: data[item].CoinName,\r\n                image: data[item].ImageUrl,\r\n                description: data[item].Description,\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default createOptions;\r\n","import axios from \"axios\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { baseURL } from \"config\";\r\nimport { useQuery } from \"react-query\";\r\nimport useMessage from \"./useMessage\";\r\nimport createOptions from \"functions/createOptions\";\r\nimport { ApiResponse } from \"types/types\";\r\n\r\nconst useFetchListOfCryptos = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const { isLoading, error, data } = useQuery([URL], () => axios(baseURL.get(\"all\")), {\r\n        staleTime: 300000,\r\n        cacheTime: 300000,\r\n        select: data => createOptions(data as unknown as ApiResponse),\r\n    });\r\n\r\n    useEffect(() => {\r\n        error && showMessage.error(`Błąd pobierania listy kryptowalut`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [error]);\r\n\r\n    return { isLoading, data };\r\n};\r\n\r\nexport default useFetchListOfCryptos;\r\n","import Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\n\r\nimport { BaseCurrency } from \"types\";\r\nimport { Legend, BaseCurrencyForm } from \"styles/styled\";\r\n\r\ninterface BaseCurrencyChoiceType {\r\n    currencyBase: BaseCurrency | null;\r\n    setCurrencyBase: Function;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n    const { currencyBase, setCurrencyBase } = props;\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrencyBase(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <BaseCurrencyForm>\r\n            <Legend> Waluta odniesienia</Legend>\r\n            <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n                <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n                <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n                <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n            </RadioGroup>\r\n        </BaseCurrencyForm>\r\n    );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n","import * as React from \"react\";\r\nimport VirtualizedSelect from \"react-virtualized-select\";\r\n\r\nimport { CurrencyCrypto } from \"types\";\r\nimport { useFetchListOfCryptos } from \"hooks\";\r\nimport Progress from \"@mui/material/CircularProgress\";\r\n\r\nimport \"./_CryptoCurrencySelectForm.scss\";\r\n\r\ninterface Props {\r\n    setCurrencyCrypto: Function;\r\n    currencyCrypto: CurrencyCrypto | undefined;\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<Props> = props => {\r\n    const { currencyCrypto, setCurrencyCrypto } = props;\r\n    const { isLoading, data: cryptos } = useFetchListOfCryptos();\r\n    const style = cryptos && (cryptos as unknown as []).length ? \"\" : \"inactivatedSelect\";\r\n\r\n    return (\r\n        <>\r\n            <label className={style}>\r\n                <VirtualizedSelect\r\n                    value={currencyCrypto}\r\n                    className=\"virtualized-select\"\r\n                    placeholder=\"Wybierz kryptowalutę\"\r\n                    onChange={(selectValue: any) => {\r\n                        setCurrencyCrypto(selectValue);\r\n                    }}\r\n                    options={cryptos as any}\r\n                />\r\n            </label>\r\n            {isLoading && <Progress color={\"success\"} thickness={5} size={100} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import { memo } from \"react\";\r\n\r\nimport \"./_logo.scss\";\r\n\r\nconst Logo = memo(() => (\r\n  <header className=\"logo\">\r\n    <h1>CryptoCurrency Tracker</h1>\r\n  </header>\r\n));\r\n\r\nexport default Logo;\r\n","import Logo from \"pages/SelectionPage/parts/Logo\";\r\n\r\nfunction withLogo<T>(Component: React.ComponentType<T>) {\r\n  return (props: React.PropsWithChildren<T>) => (\r\n    <>\r\n      <Logo />\r\n      <Component {...props} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withLogo;\r\n","import { lazy, useState, Suspense } from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\n\r\nimport BaseCurrencySelectForm from \"./parts/BaseCurrencySelection\";\r\nimport CryptoCurrencySelectForm from \"./parts/CryptoCurrencySelection\";\r\nimport withLogo from \"HOCs/withLogo\";\r\nimport BlueButton from \"components/BlueButton\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, UseConfirmChoice } from \"types\";\r\nimport { useCheckApiKey, useConfirmChoice } from \"hooks\";\r\n\r\nconst Description = lazy(() => import(\"./parts/CryptoCurrencySelection/CryptoCurrencyDescription\"));\r\n\r\nconst SelectionPage = () => {\r\n    const isApiKeyAvailable = useCheckApiKey();\r\n\r\n    let [currencyBase, setCurrencyBase] = useState<BaseCurrency | null>(null);\r\n    let [currencyCrypto, setCurrencyCrypto] = useState<CurrencyCrypto | undefined>(undefined);\r\n\r\n    const { confirmChoice, isEnabled } = useConfirmChoice({ currencyBase, currencyCrypto } as UseConfirmChoice);\r\n\r\n    if (!isApiKeyAvailable) return null;\r\n    return (\r\n        <Stack spacing={2}>\r\n            <BlueButton\r\n                classes={isEnabled ? \"enabled\" : \"\"}\r\n                isEnabled={isEnabled}\r\n                clickHandler={confirmChoice}\r\n                label=\"Pokaż kurs\"\r\n            />\r\n\r\n            <BaseCurrencySelectForm currencyBase={currencyBase} setCurrencyBase={setCurrencyBase} />\r\n            <CryptoCurrencySelectForm currencyCrypto={currencyCrypto} setCurrencyCrypto={setCurrencyCrypto} />\r\n            {currencyCrypto?.description && (\r\n                <Suspense fallback={null}>\r\n                    <Description description={currencyCrypto.description} />\r\n                </Suspense>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default withLogo(SelectionPage);\r\n","import Form from \"@mui/material/FormControl\";\n\nimport { styled } from \"@mui/system\";\nimport { FormLabel, Box } from \"@mui/material\";\n\nexport const Legend = styled(FormLabel)(({ theme }) => ({\n    textAlign: \"center\",\n    color: theme.palette.common.white,\n    \"&:focus\": { color: theme.palette.common.white },\n    \"&.Mui-focused\": { color: theme.palette.common.white },\n}));\nexport const BaseCurrencyForm = styled(Form)(({ theme }) => ({\n    borderRadius: \"2px\",\n    animation: \"fade_in 0.1s ease-in-out forwards\",\n    border: `2px solid`,\n    borderColor: theme.palette.secondary.main,\n    padding: theme.spacing(2.5),\n    width: \"300px\",\n    boxShadow: `inset 0 0 5px ${theme.palette.secondary.light}, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)`,\n    backgroundColor: theme.palette.secondary.light,\n    color: theme.palette.common.white,\n    tabIndex: \"0\",\n    \"&:hover\": { borderColor: theme.palette.primary.main },\n    \"& .MuiFormLabel-root\": { color: \"white\", fontFamily: '\"Lato\", sans-serif', paddingBottom: theme.spacing(0.6) },\n    \"& .MuiFormGroup-root\": { flexDirection: \"row\", justifyContent: \"space-around\" },\n}));\n\nexport const CryptoContainer = styled(Box)(({ theme }) => ({\n    width: \"100%\",\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    marginTop: \"30vh\",\n}));\n"],"names":["props","classes","isEnabled","clickHandler","label","className","onClick","disabled","useState","data","setData","error","setError","loading","setLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","enqueueSnackbar","useSnackbar","info","str","variant","success","isAPIKeyAvailable","useRef","current","currencyBase","navigate","useNavigate","useContext","SelectedCurrenciesContext","setCurrencyBase","setCurrencyCrypto","pathToResults","undefined","confirmChoice","state","results","obj","Data","result","item","value","CoinName","image","ImageUrl","description","Description","useQuery","baseURL","staleTime","cacheTime","select","createOptions","isLoading","useEffect","RadioGroup","name","onChange","event","target","FormControlLabel","control","Radio","useFetchListOfCryptos","cryptos","style","placeholder","selectValue","options","color","thickness","size","memo","Component","lazy","withLogo","isApiKeyAvailable","useCheckApiKey","useConfirmChoice","Stack","spacing","BlueButton","Suspense","fallback","Legend","styled","FormLabel","theme","textAlign","palette","common","white","BaseCurrencyForm","Form","borderRadius","animation","border","borderColor","secondary","main","padding","width","boxShadow","light","backgroundColor","tabIndex","primary","fontFamily","paddingBottom","flexDirection","justifyContent","CryptoContainer","Box","paddingRight","paddingLeft","marginRight","marginLeft","marginTop"],"sourceRoot":""}