{"version":3,"file":"static/js/473.becbca03.chunk.js","mappings":"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","sources":["components/Loader.tsx","components/BlueButton/BlueButton.tsx","hooks/useFetchHistoricalPrices.ts","resources/errorDictionary.ts","hooks/useMessage.ts","hooks/useTypedSelector.ts","pages/ResultsPage/ResultsPage.tsx"],"sourcesContent":["import { memo } from \"react\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Progress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst Container = withStyles({\r\n  root: {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n  },\r\n})(Box);\r\n\r\nconst ContainerVerticallyCentered = withStyles({\r\n  root: {\r\n    justifyContent: \"center\",\r\n  },\r\n})(Container);\r\n\r\nexport const CircularProgress = withStyles({\r\n  root: {\r\n    color: \"rgba(122, 194, 33, 0.8);\",\r\n  },\r\n})(Progress);\r\n/**\r\n * creates memoised spinner that indicates loading state\r\n * @returns spinner component\r\n */\r\nconst Loader = memo(() => {\r\n  return (\r\n    <ContainerVerticallyCentered>\r\n      <CircularProgress thickness={5} size={100} />\r\n    </ContainerVerticallyCentered>\r\n  );\r\n});\r\n\r\nexport default Loader;\r\n","import \"./_BlueButton.scss\";\r\n\r\ninterface Props {\r\n  classes?: string;\r\n  isEnabled?: boolean;\r\n  clickHandler?: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n  label?: string;\r\n}\r\n\r\nconst BlueButton = (props: Props) => {\r\n  const { classes = \"enabled\", isEnabled = true, clickHandler = () => {}, label = \"\" } = props;\r\n  const baseClassName = \"BlueButton\";\r\n\r\n  return (\r\n    <button className={`${baseClassName} ${classes}`} onClick={clickHandler} disabled={!isEnabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const showMessage = useMessage();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; /// co ta linika robi, tylko kopię tworzy?\r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (data.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(data.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n    }\r\n  };\r\n  const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n\r\n/**\r\n * todo sprawdzić, coś za często rzuca n/a. Sprawdzić opcje zapytania\r\n */\r\n","/**\r\n * Not in use. perhaps in the future\r\n */\r\n\r\nlet errorDictionary: { [key: string]: string } = {\r\n  404: \"Not found\",\r\n};\r\n\r\nerrorDictionary = new Proxy(errorDictionary, {\r\n  get(target, phrase: string) {\r\n    if (phrase in target) {\r\n      return target[phrase];\r\n    } else {\r\n      return phrase;\r\n    }\r\n  },\r\n});\r\n\r\nexport default errorDictionary;\r\n","import { useSnackbar } from \"notistack\";\r\n\r\nconst useMessage = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showMessage = {\r\n    info: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"info\" });\r\n    },\r\n\r\n    error: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"error\" });\r\n    },\r\n\r\n    success: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"success\" });\r\n    },\r\n\r\n    warning: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"warning\" });\r\n    },\r\n  };\r\n\r\n  return showMessage;\r\n};\r\n\r\nexport default useMessage;\r\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootStateType } from '../components/AppProvider';\r\n/**\r\n * prepares useSelectorHook which knows RootStateType\r\n */\r\nexport const useTypedSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import * as React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport { useFetchHistoricalPrices, useMessage } from \"hooks\";\r\nimport { BlueButton } from \"components\";\r\nimport { CreateURL, hasDateChanged, createResults } from \"functions\";\r\nimport { ResultsType, CryptoPrice } from \"types\";\r\nimport { initialIntervalMs } from \"../../config\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\nconst ResultsTable = React.lazy(() => import(\"./parts/ResultsTable\"));\r\nconst FetchStatusIndicator = React.lazy(() => import(\"./parts/FetchStatusIndicator\"));\r\n\r\n/**\r\n * Presents cryptocurrency price current and historical\r\n * @returns component\r\n */\r\nconst ResultsPage = (): JSX.Element => {\r\n  const history = useHistory();\r\n  const showMessage = useMessage();\r\n  const { currencyBase, currencyCrypto } = React.useContext(SelectedCurrenciesContext); // tu przemianować na selectedBaseCurrency i selectedCryptoCurrency\r\n  const intervalMs = initialIntervalMs;\r\n  const currentURL = CreateURL.current(currencyCrypto.value, currencyBase);\r\n  const [results, setResults] = React.useState<ResultsType | null>(null);\r\n\r\n  const { data: fetchedCryptocurrencyPrice, error } = useQuery(\r\n    \"currentCrypto\",\r\n    async () => {\r\n      if (hasDateChanged(intervalMs)) {\r\n        fetchHistoricalPrices(currencyCrypto, currencyBase);\r\n      }\r\n      const result = await axios.get(currentURL, { Apikey: process.env.REACT_APP_API_KEY });\r\n\r\n      return result.data;\r\n    },\r\n    {\r\n      refetchInterval: intervalMs,\r\n    }\r\n  );\r\n\r\n  const { data: historicalCryptoPrice, fetchHistoricalPrices } = useFetchHistoricalPrices();\r\n\r\n  const returnToSelectionPage = React.useCallback(() => {\r\n    history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    fetchHistoricalPrices(currencyCrypto, currencyBase);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (fetchedCryptocurrencyPrice && historicalCryptoPrice) {\r\n      let cryptoPrice = fetchedCryptocurrencyPrice[currencyBase] as CryptoPrice;\r\n\r\n      if (typeof cryptoPrice === \"number\") showMessage.success(\"Zmiana\");\r\n      else showMessage.info(\"Na serwerze nie ma danych o bieżącym kursie kryptowaluty\");\r\n\r\n      const result = createResults({ cryptoPrice, historicalCryptoPrice, currencyBase });\r\n      if (JSON.stringify(results) !== JSON.stringify(result)) {\r\n        setResults(result);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [fetchedCryptocurrencyPrice, historicalCryptoPrice]);\r\n\r\n  return (\r\n    <>\r\n      {(error || !results) && (\r\n        <React.Suspense fallback={null}>\r\n          <FetchStatusIndicator crypto={currencyCrypto.label} result={Boolean(results)} error={error} />\r\n        </React.Suspense>\r\n      )}\r\n      <BlueButton label=\"Powrót do wyboru\" clickHandler={returnToSelectionPage} />\r\n      {results && (\r\n        <React.Suspense fallback={null}>\r\n          <ResultsTable currencyCrypto={currencyCrypto} results={results} />\r\n        </React.Suspense>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultsPage;\r\n"],"names":["Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","CircularProgress","color","Progress","Loader","memo","thickness","size","props","classes","isEnabled","clickHandler","label","className","onClick","disabled","useState","data","setData","error","setError","loading","setLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","errorDictionary","Proxy","get","target","phrase","enqueueSnackbar","useSnackbar","info","str","variant","success","useTypedSelector","useSelector","ResultsTable","React","FetchStatusIndicator","history","useHistory","SelectedCurrenciesContext","currencyBase","intervalMs","initialIntervalMs","currentURL","value","results","setResults","useQuery","hasDateChanged","result","refetchInterval","fetchedCryptocurrencyPrice","useFetchHistoricalPrices","historicalCryptoPrice","returnToSelectionPage","cryptoPrice","createResults","JSON","stringify","fallback","crypto","Boolean"],"sourceRoot":""}