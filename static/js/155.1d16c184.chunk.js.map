{"version":3,"file":"static/js/155.1d16c184.chunk.js","mappings":"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","sources":["hooks/useFetchHistoricalPrices.ts","hooks/useCheckApiKey.ts","hooks/useConfirm.ts","functions/createOptions.ts","hooks/useFetchListOfCryptos.ts","pages/SelectionPage/components/CryptoCurrencyDescription.tsx","pages/SelectionPage/components/CryptoCurrencySelectForm.tsx","pages/SelectionPage/components/BaseCurrencySelectForm.tsx","pages/SelectionPage/components/Logo.tsx","HOCs/withLogo.tsx","pages/SelectionPage/SelectionPage.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const showMessage = useMessage();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; \r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (data.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(data.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n    }\r\n  };\r\n  const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","import { useRef } from \"react\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useCheckApiKey = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const isAPIKeyAvailable = useRef(false);\r\n\r\n    if (!process.env.REACT_APP_API_KEY) {\r\n        showMessage.error(`No API key available for application`);\r\n    } else {\r\n        isAPIKeyAvailable.current = true;\r\n    }\r\n    return isAPIKeyAvailable.current;\r\n};\r\n\r\nexport default useCheckApiKey;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    currencyBase: BaseCurrency;\r\n    currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosen currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst useConfirmChoice = (props: Props) => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const navigate = useNavigate();\r\n    const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n    const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n    const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n    const confirmChoice = useCallback(() => {\r\n        setCurrencyBase(currencyBase);\r\n        setCurrencyCrypto(currencyCrypto);\r\n        if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pathToResults]);\r\n\r\n    return { confirmChoice, isEnabled };\r\n};\r\n\r\nexport default useConfirmChoice;\r\n","import { ApiResponse } from \"types\";\r\n/**\r\n * Takes response from list of all cryptos API and creates array with desired content\r\n * @param obj\r\n * @returns array with code, name and link to logo of all available cryptocurrencies\r\n */\r\nconst createOptions = (obj: ApiResponse) => {\r\n    const data = obj.data.Data;\r\n\r\n    const result = [];\r\n\r\n    for (let item in data) {\r\n        if (data.hasOwnProperty(item)) {\r\n            result.push({\r\n                value: item,\r\n                label: data[item].CoinName,\r\n                image: data[item].ImageUrl,\r\n                description: data[item].Description,\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default createOptions;\r\n","import axios from \"axios\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { baseURL } from \"config\";\r\nimport { useQuery } from \"react-query\";\r\nimport useMessage from \"./useMessage\";\r\nimport createOptions from \"functions/createOptions\";\r\nimport { ApiResponse } from \"types/types\";\r\n\r\nconst useFetchListOfCryptos = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const { isLoading, error, data } = useQuery([URL], () => axios(baseURL.get(\"all\")), {\r\n        staleTime: 300000,\r\n        cacheTime: 300000,\r\n        select: data => createOptions(data as unknown as ApiResponse),\r\n    });\r\n\r\n    useEffect(() => {\r\n        error && showMessage.error(`Błąd pobierania listy kryptowalut`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [error]);\r\n\r\n    return { isLoading, data };\r\n};\r\n\r\nexport default useFetchListOfCryptos;\r\n","import * as React from \"react\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport { Description } from \"styles/styled\";\r\n\r\ninterface Props {\r\n    description: string;\r\n}\r\nconst CryptoCurrencyDescription = (props: Props) => {\r\n    const { description } = props;\r\n\r\n    return (\r\n        <Fade in={true} timeout={1000}>\r\n            <Paper elevation={1}>\r\n                <Description>{description}</Description>\r\n            </Paper>\r\n        </Fade>\r\n    );\r\n};\r\n\r\nexport default CryptoCurrencyDescription;\r\n","import * as React from \"react\";\r\nimport VirtualizedSelect from \"react-virtualized-select\";\r\n\r\nimport { CurrencyCrypto } from \"types\";\r\nimport { useFetchListOfCryptos } from \"hooks\";\r\nimport Loader from \"components/Loader\";\r\n\r\nimport \"../styles/_CryptoCurrencySelectForm.scss\";\r\n\r\ninterface Props {\r\n    setCurrencyCrypto: Function;\r\n    currencyCrypto: CurrencyCrypto | undefined;\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<Props> = props => {\r\n    const { currencyCrypto, setCurrencyCrypto } = props;\r\n    const { isLoading, data: cryptos } = useFetchListOfCryptos();\r\n    const style = cryptos && (cryptos as unknown as []).length ? \"\" : \"inactivatedSelect\";\r\n\r\n    return (\r\n        <>\r\n            <label className={style}>\r\n                <VirtualizedSelect\r\n                    value={currencyCrypto}\r\n                    className=\"virtualized-select\"\r\n                    placeholder=\"Wybierz kryptowalutę\"\r\n                    onChange={(selectValue: any) => {\r\n                        setCurrencyCrypto(selectValue);\r\n                    }}\r\n                    options={cryptos as any}\r\n                />\r\n            </label>\r\n            {isLoading && <Loader />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\n\r\nimport { BaseCurrency } from \"types\";\r\nimport { Legend, BaseCurrencyForm } from \"styles/styled\";\r\n\r\ninterface BaseCurrencyChoiceType {\r\n    currencyBase: BaseCurrency | null;\r\n    setCurrencyBase: Function;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n    const { currencyBase, setCurrencyBase } = props;\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrencyBase(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <BaseCurrencyForm>\r\n            <Legend> Waluta odniesienia</Legend>\r\n            <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n                <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n                <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n                <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n            </RadioGroup>\r\n        </BaseCurrencyForm>\r\n    );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n","import { memo } from \"react\";\r\n\r\nimport \"../styles/_logo.scss\";\r\n\r\nconst Logo = memo(() => (\r\n    <header className=\"logo\">\r\n        <h1>CryptoCurrency Tracker</h1>\r\n    </header>\r\n));\r\n\r\nexport default Logo;\r\n","import Logo from \"pages/SelectionPage/components/Logo\";\r\n\r\nfunction withLogo<T>(Component: React.ComponentType<T>) {\r\n    return (props: React.PropsWithChildren<T>) => (\r\n        <>\r\n            <Logo />\r\n            <Component {...props} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withLogo;\r\n","import { lazy, useState, Suspense } from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\n\r\nimport { CryptoCurrencySelectForm, BaseCurrencySelectForm } from \"./components\";\r\nimport withLogo from \"HOCs/withLogo\";\r\nimport BlueButton from \"components/BlueButton\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, UseConfirmChoice } from \"types\";\r\nimport { useCheckApiKey, useConfirmChoice } from \"hooks\";\r\n\r\nconst Description = lazy(() => import(\"./components/CryptoCurrencyDescription\"));\r\n\r\nconst SelectionPage = () => {\r\n    const isApiKeyAvailable = useCheckApiKey();\r\n\r\n    let [currencyBase, setCurrencyBase] = useState<BaseCurrency | null>(null);\r\n    let [currencyCrypto, setCurrencyCrypto] = useState<CurrencyCrypto | undefined>(undefined);\r\n\r\n    const { confirmChoice, isEnabled } = useConfirmChoice({ currencyBase, currencyCrypto } as UseConfirmChoice);\r\n\r\n    if (!isApiKeyAvailable) return null;\r\n    return (\r\n        <Stack spacing={2}>\r\n            <BlueButton\r\n                classes={isEnabled ? \"enabled\" : \"\"}\r\n                isEnabled={isEnabled}\r\n                clickHandler={confirmChoice}\r\n                label=\"Pokaż kurs\"\r\n            />\r\n\r\n            <BaseCurrencySelectForm currencyBase={currencyBase} setCurrencyBase={setCurrencyBase} />\r\n            <CryptoCurrencySelectForm currencyCrypto={currencyCrypto} setCurrencyCrypto={setCurrencyCrypto} />\r\n            {currencyCrypto?.description && (\r\n                <Suspense fallback={null}>\r\n                    <Description description={currencyCrypto.description} />\r\n                </Suspense>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default withLogo(SelectionPage);\r\n"],"names":["useState","data","setData","error","setError","loading","setLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","label","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","isAPIKeyAvailable","useRef","current","props","currencyBase","navigate","useNavigate","useContext","SelectedCurrenciesContext","setCurrencyBase","setCurrencyCrypto","isEnabled","pathToResults","undefined","confirmChoice","state","results","obj","Data","result","item","value","CoinName","image","ImageUrl","description","Description","useQuery","baseURL","staleTime","cacheTime","select","createOptions","isLoading","useEffect","in","timeout","elevation","useFetchListOfCryptos","cryptos","style","className","placeholder","onChange","selectValue","options","Loader","RadioGroup","name","event","target","FormControlLabel","control","Radio","memo","Component","lazy","withLogo","isApiKeyAvailable","useCheckApiKey","useConfirmChoice","Stack","spacing","BlueButton","classes","clickHandler","Suspense","fallback"],"sourceRoot":""}