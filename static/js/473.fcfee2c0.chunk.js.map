{"version":3,"file":"static/js/473.fcfee2c0.chunk.js","mappings":"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","sources":["hooks/useFetchHistoricalPrices.ts","hooks/useCheckApiKey.ts","hooks/useConfirm.ts","functions/createOptions.ts","hooks/useFetchListOfCryptos.ts","pages/ResultsPage/ResultsPage.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const showMessage = useMessage();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; \r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (data.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(data.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n    }\r\n  };\r\n  const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","import { useRef } from \"react\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useCheckApiKey = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const isAPIKeyAvailable = useRef(false);\r\n\r\n    if (!process.env.REACT_APP_API_KEY) {\r\n        showMessage.error(`No API key available for application`);\r\n    } else {\r\n        isAPIKeyAvailable.current = true;\r\n    }\r\n    return isAPIKeyAvailable.current;\r\n};\r\n\r\nexport default useCheckApiKey;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    currencyBase: BaseCurrency;\r\n    currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosen currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst useConfirmChoice = (props: Props) => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const navigate = useNavigate();\r\n    const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n    const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n    const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n    const confirmChoice = useCallback(() => {\r\n        setCurrencyBase(currencyBase);\r\n        setCurrencyCrypto(currencyCrypto);\r\n        if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pathToResults]);\r\n\r\n    return { confirmChoice, isEnabled };\r\n};\r\n\r\nexport default useConfirmChoice;\r\n","import { ApiResponse } from \"types\";\r\n/**\r\n * Takes response from list of all cryptos API and creates array with desired content\r\n * @param obj\r\n * @returns array with code, name and link to logo of all available cryptocurrencies\r\n */\r\nconst createOptions = (obj: ApiResponse) => {\r\n    const data = obj.data.Data;\r\n\r\n    const result = [];\r\n\r\n    for (let item in data) {\r\n        if (data.hasOwnProperty(item)) {\r\n            result.push({\r\n                value: item,\r\n                label: data[item].CoinName,\r\n                image: data[item].ImageUrl,\r\n                description: data[item].Description,\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default createOptions;\r\n","import axios from \"axios\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { baseURL } from \"config\";\r\nimport { useQuery } from \"react-query\";\r\nimport useMessage from \"./useMessage\";\r\nimport createOptions from \"functions/createOptions\";\r\nimport { ApiResponse } from \"types/types\";\r\n\r\nconst useFetchListOfCryptos = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const { isLoading, error, data } = useQuery([URL], () => axios(baseURL.get(\"all\")), {\r\n        staleTime: 300000,\r\n        cacheTime: 300000,\r\n        select: data => createOptions(data as unknown as ApiResponse),\r\n    });\r\n\r\n    useEffect(() => {\r\n        error && showMessage.error(`Błąd pobierania listy kryptowalut`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [error]);\r\n\r\n    return { isLoading, data };\r\n};\r\n\r\nexport default useFetchListOfCryptos;\r\n","import * as React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport { useFetchHistoricalPrices, useMessage } from \"hooks\";\r\nimport { BlueButton } from \"components\";\r\nimport { CreateURL, hasDateChanged, createResults } from \"functions\";\r\nimport { ResultsType, CryptoPrice } from \"types\";\r\nimport { initialIntervalMs } from \"../../config\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\nconst ResultsTable = React.lazy(() => import(\"./components/ResultsTable\"));\r\nconst FetchStatusIndicator = React.lazy(() => import(\"./components/FetchStatusIndicator\"));\r\n\r\n/**\r\n * Presents cryptocurrency price current and historical\r\n * @returns component\r\n */\r\nconst ResultsPage = (): JSX.Element => {\r\n    const navigate = useNavigate();\r\n    const showMessage = useMessage();\r\n    const { currencyBase, currencyCrypto } = React.useContext(SelectedCurrenciesContext); // tu przemianować na selectedBaseCurrency i selectedCryptoCurrency\r\n    const intervalMs = initialIntervalMs;\r\n    const currentURL = CreateURL.current(currencyCrypto.value, currencyBase);\r\n    const [results, setResults] = React.useState<ResultsType | null>(null);\r\n\r\n    const { data: fetchedCryptocurrencyPrice, error } = useQuery(\r\n        \"currentCrypto\",\r\n        async () => {\r\n            if (hasDateChanged(intervalMs)) {\r\n                fetchHistoricalPrices(currencyCrypto, currencyBase);\r\n            }\r\n            const result = await axios.get(currentURL, { Apikey: process.env.REACT_APP_API_KEY });\r\n\r\n            return result.data;\r\n        },\r\n        {\r\n            refetchInterval: intervalMs,\r\n        }\r\n    );\r\n\r\n    const { data: historicalCryptoPrice, fetchHistoricalPrices } = useFetchHistoricalPrices();\r\n\r\n    const returnToSelectionPage = React.useCallback(() => {\r\n        navigate(\"/\");\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        fetchHistoricalPrices(currencyCrypto, currencyBase);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (fetchedCryptocurrencyPrice && historicalCryptoPrice) {\r\n            let cryptoPrice = fetchedCryptocurrencyPrice[currencyBase] as CryptoPrice;\r\n\r\n            if (typeof cryptoPrice === \"number\") showMessage.success(\"Zmiana\");\r\n            else showMessage.info(\"Na serwerze nie ma danych o bieżącym kursie kryptowaluty\");\r\n\r\n            const result = createResults({ cryptoPrice, historicalCryptoPrice, currencyBase });\r\n            if (JSON.stringify(results) !== JSON.stringify(result)) {\r\n                setResults(result);\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [fetchedCryptocurrencyPrice, historicalCryptoPrice]);\r\n\r\n    return (\r\n        <>\r\n            {(error || !results) && (\r\n                <React.Suspense fallback={null}>\r\n                    <FetchStatusIndicator crypto={currencyCrypto.label} result={Boolean(results)} error={error} />\r\n                </React.Suspense>\r\n            )}\r\n            {results && <BlueButton label=\"Powrót do wyboru\" clickHandler={returnToSelectionPage} />}\r\n            {results && (\r\n                <React.Suspense fallback={null}>\r\n                    <ResultsTable currencyCrypto={currencyCrypto} results={results} />\r\n                </React.Suspense>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ResultsPage;\r\n"],"names":["useState","data","setData","error","setError","loading","setLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","label","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","isAPIKeyAvailable","useRef","current","props","currencyBase","navigate","useNavigate","useContext","SelectedCurrenciesContext","setCurrencyBase","setCurrencyCrypto","isEnabled","pathToResults","undefined","confirmChoice","state","results","obj","Data","result","item","value","CoinName","image","ImageUrl","description","Description","useQuery","baseURL","staleTime","cacheTime","select","createOptions","isLoading","useEffect","ResultsTable","React","FetchStatusIndicator","intervalMs","initialIntervalMs","currentURL","setResults","hasDateChanged","refetchInterval","fetchedCryptocurrencyPrice","useFetchHistoricalPrices","historicalCryptoPrice","returnToSelectionPage","cryptoPrice","success","info","createResults","JSON","stringify","fallback","crypto","Boolean","clickHandler"],"sourceRoot":""}