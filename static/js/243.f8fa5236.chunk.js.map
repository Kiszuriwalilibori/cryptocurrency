{"version":3,"file":"static/js/243.f8fa5236.chunk.js","mappings":"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","sources":["components/Loader.tsx","components/BlueButton/BlueButton.tsx","hooks/useFetchHistoricalPrices.ts","resources/errorDictionary.ts","hooks/useMessage.ts","pages/SelectionPage/parts/BaseCurrencySelection/style.ts","pages/SelectionPage/parts/BaseCurrencySelection/BaseCurrencySelectForm.tsx","pages/SelectionPage/fetchListOfAllCryptos.tsx","pages/SelectionPage/parts/CryptoCurrencySelection/CryptoCurrencySelectForm.tsx","pages/SelectionPage/parts/ConfirmButton/ConfirmButton.tsx","pages/SelectionPage/parts/Logo/Logo.tsx","HOCs/withLogo.tsx","pages/SelectionPage/SelectionPage.tsx"],"sourcesContent":["import { memo } from \"react\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Progress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst Container = withStyles({\r\n  root: {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n  },\r\n})(Box);\r\n\r\nconst ContainerVerticallyCentered = withStyles({\r\n  root: {\r\n    justifyContent: \"center\",\r\n  },\r\n})(Container);\r\n\r\nexport const CircularProgress = withStyles({\r\n  root: {\r\n    color: \"rgba(122, 194, 33, 0.8);\",\r\n  },\r\n})(Progress);\r\n/**\r\n * creates memoised spinner that indicates loading state\r\n * @returns spinner component\r\n */\r\nconst Loader = memo(() => {\r\n  return (\r\n    <ContainerVerticallyCentered>\r\n      <CircularProgress thickness={5} size={100} />\r\n    </ContainerVerticallyCentered>\r\n  );\r\n});\r\n\r\nexport default Loader;\r\n","import \"./_BlueButton.scss\";\r\n\r\ninterface Props {\r\n  classes?: string;\r\n  isEnabled?: boolean;\r\n  clickHandler?: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n  label?: string;\r\n}\r\n\r\nconst BlueButton = (props: Props) => {\r\n  const { classes = \"enabled\", isEnabled = true, clickHandler = () => {}, label = \"\" } = props;\r\n  const baseClassName = \"BlueButton\";\r\n\r\n  return (\r\n    <button className={`${baseClassName} ${classes}`} onClick={clickHandler} disabled={!isEnabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n//import { useSnackbar } from \"notistack\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const showMessage = useMessage();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; /// co ta linika robi, tylko kopiÄ™ tworzy?\r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (data.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(data.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n    }\r\n  };\r\n  const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","/**\r\n * Not in use. perhaps in the future\r\n */\r\n\r\nlet errorDictionary: { [key: string]: string } = {\r\n  404: \"Not found\",\r\n};\r\n\r\nerrorDictionary = new Proxy(errorDictionary, {\r\n  get(target, phrase: string) {\r\n    if (phrase in target) {\r\n      return target[phrase];\r\n    } else {\r\n      return phrase;\r\n    }\r\n  },\r\n});\r\n\r\nexport default errorDictionary;\r\n","import { useSnackbar } from \"notistack\";\r\n\r\nconst useMessage = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showMessage = {\r\n    info: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"info\" });\r\n    },\r\n\r\n    error: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"error\" });\r\n    },\r\n\r\n    success: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"success\" });\r\n    },\r\n\r\n    warning: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"warning\" });\r\n    },\r\n  };\r\n\r\n  return showMessage;\r\n};\r\n\r\nexport default useMessage;\r\n","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Form from \"@material-ui/core/FormControl\";\r\n\r\nexport const BaseCurrencySelectFormWrapper = withStyles({\r\n  root: {\r\n    borderRadius: \"2px\",\r\n    animation: \"fade_in 0.1s ease-in-out forwards\",\r\n    border: \"2px solid #1E1F26\",\r\n    padding: \"20px\",\r\n    width: \"300px\",\r\n    margin: \"2vh 0\",\r\n    boxShadow: \"inset 0 0 5px #1E1F26, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)\",\r\n    backgroundColor: \"#2C303A\",\r\n    color: \"white\",\r\n    tabindex: \"0\",\r\n    \"&:hover\": { border: \"2px solid #EE760A\" },\r\n    \"&:focus\": { border: \"2px solid red\" },\r\n    \"& .MuiFormLabel-root\": { color: \"white\", fontFamily: '\"Lato\", sans-serif', paddingBottom: \"5px\" },\r\n    \"& .MuiFormGroup-root\": { flexDirection: \"row\", justifyContent: \"space-around\" },\r\n    \"& .MuiRadio-colorSecondary.Mui-checked\": { color: \"#EE760A\" },\r\n    \"& legend\": { textAlign: \"center\" },\r\n  },\r\n})(Form);\r\n","import Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\nimport { BaseCurrencySelectFormWrapper } from \"./style\";\r\nimport { BaseCurrency } from \"types\";\r\n\r\ninterface BaseCurrencyChoiceType {\r\n  currencyBase: BaseCurrency | null;\r\n  setCurrencyBase: Function;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n  const { currencyBase, setCurrencyBase } = props;\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCurrencyBase(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <BaseCurrencySelectFormWrapper>\r\n      <FormLabel component=\"legend\">Waluta odniesienia</FormLabel>\r\n      <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n        <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n        <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n        <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n      </RadioGroup>\r\n    </BaseCurrencySelectFormWrapper>\r\n  );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n","import { useLazyAxios } from \"use-axios-client\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\n//import { ApiResponse } from \"types\";\r\nimport { useMessage } from \"hooks\";\r\n//import { createOptions } from \"functions\";\r\nimport { CircularProgress } from \"components/Loader\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nimport { setListOfAllCryptos, getListOfCryptos } from \"../../reducer/cryptosListSlice\";\r\n\r\nconst FetchListOfAllCryptos = ({ children }: any) => {\r\n  const ref = useRef({\r\n    fetchingListActive: false,\r\n    listReceived: false,\r\n  });\r\n  const showMessage = useMessage();\r\n  const listOfAllCryptos = useSelector(getListOfCryptos, shallowEqual);\r\n  const dispatch = useDispatch();\r\n  const [getListOfAllAvailableCryptos, { data: dataFromCryptosAPI, error: listError, loading }] = useLazyAxios({\r\n    url: process.env.REACT_APP_ALL_CRYPTOS_URL,\r\n  });\r\n  useEffect(() => {\r\n    listError && showMessage.error(`BÅ‚Ä…d pobierania listy kryptowalut`);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [listError]);\r\n\r\n  useEffect(() => {\r\n    if (dataFromCryptosAPI && !ref.current.listReceived) {\r\n      dispatch(setListOfAllCryptos(dataFromCryptosAPI));\r\n      showMessage.success(`PomyÅ›lnie pobrano listÄ™ dostÄ™pnych kryptowalut`);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dataFromCryptosAPI, ref.current.listReceived]);\r\n\r\n  if (!listOfAllCryptos && !ref.current.fetchingListActive) {\r\n    ref.current.fetchingListActive = true;\r\n    getListOfAllAvailableCryptos(); // triggers fetch list async action\r\n  }\r\n\r\n  if (listOfAllCryptos && !ref.current.listReceived) {\r\n    ref.current.listReceived = true;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {children}\r\n      {loading && <CircularProgress thickness={5} size={100} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FetchListOfAllCryptos;\r\n","import * as React from \"react\";\r\nimport VirtualizedSelect from \"react-virtualized-select\";\r\n\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { CurrencyCrypto } from \"types\";\r\n\r\nimport FetchListOfAllCryptos from \"pages/SelectionPage/fetchListOfAllCryptos\";\r\nimport \"./_CryptoCurrencySelectForm.scss\";\r\n\r\nimport { getListOfCryptos } from \"reducer/cryptosListSlice\";\r\ninterface Props {\r\n  setCurrencyCrypto: Function;\r\n  currencyCrypto: CurrencyCrypto | undefined;\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<Props> = props => {\r\n  const { currencyCrypto, setCurrencyCrypto } = props;\r\n  const cryptos = useSelector(getListOfCryptos, shallowEqual);\r\n  const style = cryptos && cryptos.length ? \"\" : \"inactivatedSelect\";\r\n\r\n  return (\r\n    <FetchListOfAllCryptos>\r\n      <label className={style}>\r\n        <VirtualizedSelect\r\n          value={currencyCrypto}\r\n          className=\"virtualized-select\"\r\n          placeholder=\"Wybierz kryptowalutÄ™\"\r\n          onChange={selectValue => {\r\n            setCurrencyCrypto(selectValue);\r\n          }}\r\n          options={cryptos as any}\r\n        />\r\n      </label>\r\n    </FetchListOfAllCryptos>\r\n  );\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\nimport { BlueButton } from \"components\";\r\n\r\ninterface Props {\r\n  currencyBase: BaseCurrency;\r\n  currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosesn currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst ConfirmButton = (props: Props): JSX.Element => {\r\n  const { currencyBase, currencyCrypto } = props;\r\n  const navigate = useNavigate();\r\n  const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n  const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n  const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n  const confirmChoice = useCallback(() => {\r\n    setCurrencyBase(currencyBase);\r\n    setCurrencyCrypto(currencyCrypto);\r\n    if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pathToResults]);\r\n\r\n  return <BlueButton classes={isEnabled ? \"enabled\" : \"\"} isEnabled={isEnabled} clickHandler={confirmChoice} label=\"PokaÅ¼ kurs\" />;\r\n};\r\n\r\nexport default ConfirmButton;\r\n","import { memo } from \"react\";\r\n\r\nimport \"./_logo.scss\";\r\n\r\nconst Logo = memo(() => (\r\n  <header className=\"logo\">\r\n    <h1>CryptoCurrency Tracker</h1>\r\n  </header>\r\n));\r\n\r\nexport default Logo;\r\n","import Logo from \"pages/SelectionPage/parts/Logo\";\r\n\r\nfunction withLogo<T>(Component: React.ComponentType<T>) {\r\n  return (props: React.PropsWithChildren<T>) => (\r\n    <>\r\n      <Logo />\r\n      <Component {...props} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withLogo;\r\n","import { lazy, useState, Suspense } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport BaseCurrencySelectForm from \"./parts/BaseCurrencySelection\";\r\nimport CryptoCurrencySelectForm from \"./parts/CryptoCurrencySelection\";\r\nimport CurrenciesSelectionConfirmButton from \"./parts/ConfirmButton\";\r\nimport withLogo from \"HOCs/withLogo\";\r\n\r\nimport \"./_SelectionSection.scss\";\r\n\r\nconst Description = lazy(() => import(\"./parts/CryptoCurrencySelection/CryptoCurrencyDescription\"));\r\n\r\nconst SelectionSection = () => {\r\n  let [currencyBase, setCurrencyBase] = useState<BaseCurrency | null>(null);\r\n  let [currencyCrypto, setCurrencyCrypto] = useState<CurrencyCrypto | undefined>(undefined);\r\n\r\n  return (\r\n    <section className=\"SelectionSection\">\r\n      <CurrenciesSelectionConfirmButton currencyBase={currencyBase as BaseCurrency} currencyCrypto={currencyCrypto as CurrencyCrypto} />\r\n      <BaseCurrencySelectForm currencyBase={currencyBase} setCurrencyBase={setCurrencyBase} />\r\n      <CryptoCurrencySelectForm currencyCrypto={currencyCrypto} setCurrencyCrypto={setCurrencyCrypto} />\r\n      {currencyCrypto?.description && (\r\n        <Suspense fallback={null}>\r\n          <Description description={currencyCrypto.description} />\r\n        </Suspense>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default withLogo(SelectionSection);\r\n"],"names":["Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","CircularProgress","color","Progress","Loader","memo","thickness","size","props","classes","isEnabled","clickHandler","label","className","onClick","disabled","useState","data","setData","error","setError","loading","setLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","errorDictionary","Proxy","get","target","phrase","enqueueSnackbar","useSnackbar","info","str","variant","success","BaseCurrencySelectFormWrapper","borderRadius","animation","border","padding","width","boxShadow","backgroundColor","tabindex","fontFamily","paddingBottom","textAlign","Form","currencyBase","setCurrencyBase","FormLabel","component","RadioGroup","name","value","onChange","event","FormControlLabel","control","Radio","children","ref","useRef","fetchingListActive","listReceived","listOfAllCryptos","useSelector","getListOfCryptos","shallowEqual","dispatch","useDispatch","useLazyAxios","url","getListOfAllAvailableCryptos","dataFromCryptosAPI","listError","useEffect","current","setListOfAllCryptos","setCurrencyCrypto","cryptos","style","placeholder","selectValue","options","navigate","useNavigate","useContext","SelectedCurrenciesContext","pathToResults","undefined","confirmChoice","state","results","Component","Description","lazy","withLogo","description","Suspense","fallback"],"sourceRoot":""}