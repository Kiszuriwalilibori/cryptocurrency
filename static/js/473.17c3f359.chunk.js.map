{"version":3,"file":"static/js/473.17c3f359.chunk.js","mappings":"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","sources":["components/BlueButton/BlueButton.tsx","components/Loader.tsx","hooks/useFetchHistoricalPrices.ts","hooks/useMessage.ts","hooks/useCheckApiKey.ts","hooks/useConfirm.ts","functions/createOptions.ts","hooks/useFetchListOfCryptos.ts","pages/ResultsPage/ResultsPage.tsx","styles/sxStyles.ts"],"sourcesContent":["import \"./_BlueButton.scss\";\r\n\r\ninterface Props {\r\n  classes?: string;\r\n  isEnabled?: boolean;\r\n  clickHandler?: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n  label?: string;\r\n}\r\n\r\nconst BlueButton = (props: Props) => {\r\n  const { classes = \"enabled\", isEnabled = true, clickHandler = () => {}, label = \"\" } = props;\r\n  const baseClassName = \"BlueButton\";\r\n\r\n  return (\r\n    <button className={`${baseClassName} ${classes}`} onClick={clickHandler} disabled={!isEnabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import Box from \"@mui/material/Box\";\r\nimport Progress from \"@mui/material/CircularProgress\";\r\n\r\nimport { memo } from \"react\";\r\nimport { loaderContainerStyle } from \"styles/sxStyles\";\r\n\r\n/**\r\n * creates memoised spinner that indicates loading state\r\n * @returns spinner component\r\n */\r\nconst Loader = memo(() => {\r\n    return (\r\n        <Box sx={{ ...loaderContainerStyle }}>\r\n            <Progress color={\"success\"} thickness={5} size={100} />\r\n        </Box>\r\n    );\r\n});\r\n\r\nexport default Loader;\r\n","import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const showMessage = useMessage();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; \r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (data.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(data.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n    }\r\n  };\r\n  const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","import { useSnackbar } from \"notistack\";\r\n\r\nconst useMessage = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showMessage = {\r\n    info: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"info\" });\r\n    },\r\n\r\n    error: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"error\" });\r\n    },\r\n\r\n    success: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"success\" });\r\n    },\r\n\r\n    warning: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"warning\" });\r\n    },\r\n  };\r\n\r\n  return showMessage;\r\n};\r\n\r\nexport default useMessage;\r\n","import { useRef } from \"react\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useCheckApiKey = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const isAPIKeyAvailable = useRef(false);\r\n\r\n    if (!process.env.REACT_APP_API_KEY) {\r\n        showMessage.error(`No API key available for application`);\r\n    } else {\r\n        isAPIKeyAvailable.current = true;\r\n    }\r\n    return isAPIKeyAvailable.current;\r\n};\r\n\r\nexport default useCheckApiKey;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    currencyBase: BaseCurrency;\r\n    currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosen currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst useConfirmChoice = (props: Props) => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const navigate = useNavigate();\r\n    const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n    const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n    const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n    const confirmChoice = useCallback(() => {\r\n        setCurrencyBase(currencyBase);\r\n        setCurrencyCrypto(currencyCrypto);\r\n        if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pathToResults]);\r\n\r\n    return { confirmChoice, isEnabled };\r\n};\r\n\r\nexport default useConfirmChoice;\r\n","import { ApiResponse } from \"types\";\r\n/**\r\n * Takes response from list of all cryptos API and creates array with desired content\r\n * @param obj\r\n * @returns array with code, name and link to logo of all available cryptocurrencies\r\n */\r\nconst createOptions = (obj: ApiResponse) => {\r\n    const data = obj.data.Data;\r\n\r\n    const result = [];\r\n\r\n    for (let item in data) {\r\n        if (data.hasOwnProperty(item)) {\r\n            result.push({\r\n                value: item,\r\n                label: data[item].CoinName,\r\n                image: data[item].ImageUrl,\r\n                description: data[item].Description,\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default createOptions;\r\n","import axios from \"axios\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { baseURL } from \"config\";\r\nimport { useQuery } from \"react-query\";\r\nimport useMessage from \"./useMessage\";\r\nimport createOptions from \"functions/createOptions\";\r\nimport { ApiResponse } from \"types/types\";\r\n\r\nconst useFetchListOfCryptos = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const { isLoading, error, data } = useQuery([URL], () => axios(baseURL.get(\"all\")), {\r\n        staleTime: 300000,\r\n        cacheTime: 300000,\r\n        select: data => createOptions(data as unknown as ApiResponse),\r\n    });\r\n\r\n    useEffect(() => {\r\n        error && showMessage.error(`Błąd pobierania listy kryptowalut`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [error]);\r\n\r\n    return { isLoading, data };\r\n};\r\n\r\nexport default useFetchListOfCryptos;\r\n","import * as React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport { useFetchHistoricalPrices, useMessage } from \"hooks\";\r\nimport { BlueButton } from \"components\";\r\nimport { CreateURL, hasDateChanged, createResults } from \"functions\";\r\nimport { ResultsType, CryptoPrice } from \"types\";\r\nimport { initialIntervalMs } from \"../../config\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\nconst ResultsTable = React.lazy(() => import(\"./parts/ResultsTable\"));\r\nconst FetchStatusIndicator = React.lazy(() => import(\"./parts/FetchStatusIndicator\"));\r\n\r\n/**\r\n * Presents cryptocurrency price current and historical\r\n * @returns component\r\n */\r\nconst ResultsPage = (): JSX.Element => {\r\n  const navigate = useNavigate();\r\n  const showMessage = useMessage();\r\n  const { currencyBase, currencyCrypto } = React.useContext(SelectedCurrenciesContext); // tu przemianować na selectedBaseCurrency i selectedCryptoCurrency\r\n  const intervalMs = initialIntervalMs;\r\n  const currentURL = CreateURL.current(currencyCrypto.value, currencyBase);\r\n  const [results, setResults] = React.useState<ResultsType | null>(null);\r\n\r\n  const { data: fetchedCryptocurrencyPrice, error } = useQuery(\r\n    \"currentCrypto\",\r\n    async () => {\r\n      if (hasDateChanged(intervalMs)) {\r\n        fetchHistoricalPrices(currencyCrypto, currencyBase);\r\n      }\r\n      const result = await axios.get(currentURL, { Apikey: process.env.REACT_APP_API_KEY });\r\n\r\n      return result.data;\r\n    },\r\n    {\r\n      refetchInterval: intervalMs,\r\n    }\r\n  );\r\n\r\n  const { data: historicalCryptoPrice, fetchHistoricalPrices } = useFetchHistoricalPrices();\r\n\r\n  const returnToSelectionPage = React.useCallback(() => {\r\n    navigate(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    fetchHistoricalPrices(currencyCrypto, currencyBase);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (fetchedCryptocurrencyPrice && historicalCryptoPrice) {\r\n      let cryptoPrice = fetchedCryptocurrencyPrice[currencyBase] as CryptoPrice;\r\n\r\n      if (typeof cryptoPrice === \"number\") showMessage.success(\"Zmiana\");\r\n      else showMessage.info(\"Na serwerze nie ma danych o bieżącym kursie kryptowaluty\");\r\n\r\n      const result = createResults({ cryptoPrice, historicalCryptoPrice, currencyBase });\r\n      if (JSON.stringify(results) !== JSON.stringify(result)) {\r\n        setResults(result);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [fetchedCryptocurrencyPrice, historicalCryptoPrice]);\r\n\r\n  return (\r\n    <>\r\n      {(error || !results) && (\r\n        <React.Suspense fallback={null}>\r\n          <FetchStatusIndicator crypto={currencyCrypto.label} result={Boolean(results)} error={error} />\r\n        </React.Suspense>\r\n      )}\r\n      <BlueButton label=\"Powrót do wyboru\" clickHandler={returnToSelectionPage} />\r\n      {results && (\r\n        <React.Suspense fallback={null}>\r\n          <ResultsTable currencyCrypto={currencyCrypto} results={results} />\r\n        </React.Suspense>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultsPage;\r\n","export const localBrown = \"#EE760A\";\r\nexport const localGrey = \"#1E1F26\";\r\n\r\nexport const loaderContainerStyle = {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n    justifyContent: \"center\",\r\n};\r\n\r\nexport const tooltipStyle = {\r\n    backgroundColor: \"#F5C200\",\r\n    border: `1px solid ${localBrown}`,\r\n    boxShadow: `inset 0 0 5px ${localBrown}`,\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    fontSize: 11,\r\n};\r\n"],"names":["props","classes","isEnabled","clickHandler","label","className","onClick","disabled","memo","Box","sx","loaderContainerStyle","color","thickness","size","useState","data","setData","error","setError","loading","setLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","enqueueSnackbar","useSnackbar","info","str","variant","success","isAPIKeyAvailable","useRef","current","currencyBase","navigate","useNavigate","useContext","SelectedCurrenciesContext","setCurrencyBase","setCurrencyCrypto","pathToResults","undefined","confirmChoice","state","results","obj","Data","result","item","value","CoinName","image","ImageUrl","description","Description","useQuery","baseURL","staleTime","cacheTime","select","createOptions","isLoading","useEffect","ResultsTable","React","FetchStatusIndicator","intervalMs","initialIntervalMs","currentURL","setResults","hasDateChanged","refetchInterval","fetchedCryptocurrencyPrice","useFetchHistoricalPrices","historicalCryptoPrice","returnToSelectionPage","cryptoPrice","createResults","JSON","stringify","fallback","crypto","Boolean","localBrown","margin","display","flexDirection","height","alignItems","background","paddingTop","justifyContent","tooltipStyle","backgroundColor","border","boxShadow","fontSize"],"sourceRoot":""}