{"version":3,"file":"static/js/787.8a6bf395.chunk.js","mappings":"2KAKMA,GAAYC,EAAAA,EAAAA,GAAW,CACzBC,KAAM,CACFC,OAAQ,SACRC,QAAS,OACTC,cAAe,SACfC,OAAQ,QACRC,WAAY,SACZC,WAAY,cACZC,WAAY,SARFR,CAUfS,EAAAA,GAEGC,GAA8BV,EAAAA,EAAAA,GAAW,CAC3CC,KAAM,CACFU,eAAgB,WAFYX,CAIjCD,GAEGa,GAAwBZ,EAAAA,EAAAA,GAAW,CACrCC,KAAM,CACFY,MAAO,6BAFeb,CAI3Bc,EAAAA,GAKGC,EAASC,EAAAA,MAAW,WACtB,OACI,SAACN,EAAD,WACI,SAACE,EAAD,CAAuBK,UAAW,EAAGC,KAAM,WAKvD,O,qHCHA,EAvByC,SAACC,GACtC,IAAQC,EAAiCD,EAAjCC,aAAcC,EAAmBF,EAAnBE,eAChBC,GAAUC,EAAAA,EAAAA,MAChB,EAA+CP,EAAAA,WAAiBQ,EAAAA,GAAxDC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,kBACnBC,KAAqBP,IAAgBC,GACrCO,EAAUD,EAAY,gCAAkC,wBACxDE,EAAgBF,EAAS,WAAON,EAAeS,MAAtB,cAAiCV,QAAiBW,EAEjF,OACI,mBACIC,UAAWJ,EACXK,UAAWN,EACXO,QAAS,WACLT,EAAgBL,GAChBM,EAAkBL,GACdQ,GAAeP,EAAQa,KAAKN,IANxC,8B,oBCRR,GAZmC7B,EAAAA,EAAAA,GAAW,CAC1CC,KAAM,CACFC,OAAQ,SACRC,QAAS,OACTC,cAAe,SACfC,OAAQ,QACRC,WAAY,SACZC,WAAY,cACZC,WAAY,SAReR,CAUhCS,EAAAA,G,iDCXU2B,GAAgBpC,EAAAA,EAAAA,GAAW,CACpCC,KAAM,CACFoC,aAAc,MACdC,UAAW,kCACXC,OAAQ,oBACRC,QAAS,OACTC,MAAO,QACPvC,OAAQ,QACRwC,UACI,qMACJC,gBAAiB,UACjB9B,MAAO,QACP,UAAW,CAAE0B,OAAQ,qBACrB,uBAAwB,CAAE1B,MAAO,QAAS+B,WAAY,qBAAsBC,cAAe,OAC3F,uBAAwB,CAAEzC,cAAe,MAAOO,eAAgB,gBAChE,yCAA0C,CAAEE,MAAO,aAf9Bb,CAiB1B8C,EAAAA,GCkBH,EAlB+B,SAAC3B,GAC5B,IAAQC,EAAkCD,EAAlCC,aAAcK,EAAoBN,EAApBM,gBAKtB,OACI,UAACW,EAAD,YACI,SAACW,EAAA,EAAD,CAAWC,UAAU,SAArB,iCACA,UAACC,EAAA,EAAD,CAAY,aAAW,WAAWC,KAAK,WAAWC,MAAO/B,EAAcgC,SAP1D,SAACC,GAClB5B,EAAgB4B,EAAMC,OAAOH,QAMzB,WACI,SAACI,EAAA,EAAD,CAAkBJ,MAAM,MAAMK,SAAS,SAACC,EAAA,EAAD,IAAW3B,MAAM,SACxD,SAACyB,EAAA,EAAD,CAAkBJ,MAAM,MAAMK,SAAS,SAACC,EAAA,EAAD,IAAW3B,MAAM,SACxD,SAACyB,EAAA,EAAD,CAAkBJ,MAAM,MAAMK,SAAS,SAACC,EAAA,EAAD,IAAW3B,MAAM,eCdxE,EAXsB,SAAC4B,GACnB,IAAcC,EAASD,EAAfE,KACFC,EAAS,GACf,IAAK,IAAIC,KAAQH,EACTA,EAAKI,eAAeD,IACpBD,EAAO1B,KAAK,CAAEgB,MAAOW,EAAMhC,MAAO6B,EAAKG,GAAME,SAAUC,MAAON,EAAKG,GAAMI,WAGjF,OAAOL,G,0DCTEM,EAAwDC,EAAAA,GC8BrE,EAhBsE,SAAAjD,GAClE,IAAQE,EAAsCF,EAAtCE,eAAgBK,EAAsBP,EAAtBO,kBAClB2C,EAAUF,GAAiB,SAAAG,GAAK,OAAIA,EAAMC,mBAAkBC,EAAAA,IAClE,OAAOH,GAAWA,EAAQI,QACtB,SAAC,IAAD,CACItB,MAAO9B,EACPW,UAAU,4BACV0C,YAAY,4BACZtB,SAAU,SAAAuB,GACNjD,EAAkBiD,IAEtBC,QAASP,IAEb,M,UCdR,IA+DA,EA/DqC,WACjC,MAAsCrD,EAAAA,SAAwC,MAA9E,eAAKI,EAAL,KAAmBK,EAAnB,KACA,EAA0CT,EAAAA,SAA0C,MAApF,eAAKK,EAAL,KAAqBK,EAArB,KACMmD,EAAM7D,EAAAA,OAAa,CACrB8D,oBAAoB,EACpBC,cAAc,IAGVC,GAAoBC,EAAAA,EAAAA,MAApBD,gBACFT,EAAmBJ,GAAiB,SAAAG,GAAK,OAAIA,EAAMC,mBAAkBC,EAAAA,IACrEU,GAAWC,EAAAA,EAAAA,MACjB,GACIC,EAAAA,EAAAA,cAAa,CACTC,IAAKC,wDAFb,eAAOC,EAAP,YAA6CC,EAA7C,EAAuC7B,KAAiC8B,EAAxE,EAAiEC,MAAkBC,EAAnF,EAAmFA,QAsBnF,OAlBAC,EAAAA,EAAAA,YAAU,WACNH,GACIT,EAAgB,8CAAqC,CACjDa,QAAS,YAElB,CAACJ,KAEJG,EAAAA,EAAAA,YAAU,YCpCC,WACX,IAAIE,EAAKC,OAAOC,UAAUC,UACf,eAAeC,KAAKJ,KAG3BC,OAAOI,SAASC,KAAO,2CDgCvBC,KACD,KAEHT,EAAAA,EAAAA,YAAU,WACN,GAAIJ,IAAuBX,EAAIyB,QAAQvB,aAAc,CACjD,IAAMH,EAAU2B,EAAcf,GAC9BN,EAAS,CAAEsB,KAAM,0BAA2BC,QAAS7B,OAE1D,CAACY,EAAoBX,EAAIyB,QAAQvB,eAEhCY,GAAgB,SAAC,IAAD,KAEfpB,GAAqBM,EAAIyB,QAAQxB,qBAClCD,EAAIyB,QAAQxB,oBAAqB,EACjCS,KAGAhB,IAAqBM,EAAIyB,QAAQvB,eACjCF,EAAIyB,QAAQvB,cAAe,IAI3B,UAAC,EAAD,YACI,SAAC,EAAD,CACI3D,aAAcA,EACdC,eAAgBA,KAEpB,SAAC,EAAD,CACID,aAAcA,EACdK,gBAAiBA,KAGrB,SAAC,EAAD,CACIJ,eAAgBA,EAChBK,kBAAmBA","sources":["components/Spinner.tsx","pages/Selection/parts/CurrenciesSelectionConfirmButton/CurrenciesSelectionConfirmButton.tsx","pages/Selection/parts/SearchPage_Container/SearchPage_Container.tsx","pages/Selection/parts/BaseCurrencySelection/style.ts","pages/Selection/parts/BaseCurrencySelection/BaseCurrencySelectForm.tsx","functions/createOptions.ts","hooks/useTypedSelector.ts","pages/Selection/parts/CryptoCurrencySelection/CryptoCurrencySelectForm.tsx","pages/Selection/SelectionOfCurrencyAndCrypto.tsx","functions/notForIE.ts"],"sourcesContent":["import * as React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Container = withStyles({\r\n    root: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100vh',\r\n        alignItems: 'center',\r\n        background: 'transparent',\r\n        paddingTop: '10vh',\r\n    },\r\n})(Box);\r\n\r\nconst ContainerVerticallyCentered = withStyles({\r\n    root: {\r\n        justifyContent: 'center',\r\n    },\r\n})(Container);\r\n\r\nconst ColorCircularProgress = withStyles({\r\n    root: {\r\n        color: 'rgba(122, 194, 33, 0.8);',\r\n    },\r\n})(CircularProgress);\r\n/**\r\n * creates memoised spinner that indicates loading state\r\n * @returns spinner component\r\n */\r\nconst Loader = React.memo(() => {\r\n    return (\r\n        <ContainerVerticallyCentered>\r\n            <ColorCircularProgress thickness={5} size={100} />\r\n        </ContainerVerticallyCentered>\r\n    );\r\n});\r\n\r\nexport default Loader;\r\n","import * as React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { baseCurrencyType, optionType } from '../../../../types';\r\nimport { SelectedCurrenciesContext } from '../../../../context/currenciesContext';\r\n\r\ninterface SelectedCurrenciesType {\r\n    currencyBase: baseCurrencyType;\r\n    currencyCrypto: optionType;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosesn currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst CurrenciesSelectionConfirmButton = (props: SelectedCurrenciesType): JSX.Element => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const history = useHistory();\r\n    const { setCurrencyBase, setCurrencyCrypto } = React.useContext(SelectedCurrenciesContext);\r\n    const isEnabled: boolean = currencyBase && currencyCrypto ? true : false;\r\n    const classes = isEnabled ? 'currencySettingButton enabled' : 'currencySettingButton';\r\n    const pathToResults = isEnabled ? `/${currencyCrypto.label} / ${currencyBase}` : undefined;\r\n\r\n    return (\r\n        <button\r\n            className={classes}\r\n            disabled={!isEnabled}\r\n            onClick={() => {\r\n                setCurrencyBase(currencyBase);\r\n                setCurrencyCrypto(currencyCrypto);\r\n                if (pathToResults) history.push(pathToResults);\r\n            }}\r\n        >\r\n            Poka≈º kurs\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default CurrenciesSelectionConfirmButton;\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport const SearchPageContainer = withStyles({\r\n    root: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100vh',\r\n        alignItems: 'center',\r\n        background: 'transparent',\r\n        paddingTop: '10vh',\r\n    },\r\n})(Box);\r\n\r\nexport default SearchPageContainer;\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nexport const MyFormControl = withStyles({\r\n    root: {\r\n        borderRadius: '2px',\r\n        animation: 'fade_in 1s ease-in-out forwards',\r\n        border: '2px solid #1E1F26',\r\n        padding: '20px',\r\n        width: '300px',\r\n        margin: '2vh 0',\r\n        boxShadow:\r\n            'inset 0 0 5px #1E1F26, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n        backgroundColor: '#2C303A',\r\n        color: 'white',\r\n        '&:hover': { border: '2px solid #EE760A' },\r\n        '& .MuiFormLabel-root': { color: 'white', fontFamily: '\"Lato\", sans-serif', paddingBottom: '5px' },\r\n        '& .MuiFormGroup-root': { flexDirection: 'row', justifyContent: 'space-around' },\r\n        '& .MuiRadio-colorSecondary.Mui-checked': { color: '#EE760A' },\r\n    },\r\n})(FormControl);\r\n","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { MyFormControl } from './style';\r\nimport { baseCurrencyType } from '../../../../types';\r\n\r\ninterface BaseCurrencyChoiceType {\r\n    currencyBase: baseCurrencyType;\r\n    setCurrencyBase: Function;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n    const { currencyBase, setCurrencyBase } = props;\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrencyBase(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <MyFormControl>\r\n            <FormLabel component=\"legend\">Waluta odniesienia</FormLabel>\r\n            <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n                <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n                <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n                <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n            </RadioGroup>\r\n        </MyFormControl>\r\n    );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n","import { optionsArrayType, ApiResponseType } from '../types';\r\n/**\r\n * Takes response from list of all cryptos API and creates array with desired content\r\n * @param obj\r\n * @returns array with code, name and link to logo of all available cryptocurrencies\r\n */\r\nconst createOptions = (obj: ApiResponseType): optionsArrayType => {\r\n    const { Data: data } = obj;\r\n    const result = [];\r\n    for (var item in data) {\r\n        if (data.hasOwnProperty(item)) {\r\n            result.push({ value: item, label: data[item].CoinName, image: data[item].ImageUrl });\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport default createOptions;\r\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootStateType } from '../components/AppProvider';\r\n/**\r\n * prepares useSelectorHook which knows RootStateType\r\n */\r\nexport const useTypedSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import * as React from 'react';\r\nimport 'react-virtualized-select/styles.css';\r\nimport 'react-virtualized/styles.css';\r\nimport 'react-virtualized-select/styles.css';\r\nimport VirtualizedSelect from 'react-virtualized-select';\r\nimport { useTypedSelector } from '../../../../hooks/useTypedSelector';\r\nimport { shallowEqual } from 'react-redux';\r\nimport { currencyCryptoType } from '../../../../types';\r\n\r\ninterface CryptoCurrencyChoiceProps {\r\n    setCurrencyCrypto: Function;\r\n    currencyCrypto: currencyCryptoType;\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<CryptoCurrencyChoiceProps> = props => {\r\n    const { currencyCrypto, setCurrencyCrypto } = props;\r\n    const cryptos = useTypedSelector(state => state.listOfAllCryptos, shallowEqual);\r\n    return cryptos && cryptos.length ? (\r\n        <VirtualizedSelect\r\n            value={currencyCrypto}\r\n            className=\"selector-item virtualized\"\r\n            placeholder=\"Wybierz kryptowalutƒô\"\r\n            onChange={selectValue => {\r\n                setCurrencyCrypto(selectValue);\r\n            }}\r\n            options={cryptos}\r\n        />\r\n    ) : null;\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import React, { useEffect } from 'react';\r\nimport CurrenciesSelectionConfirmButton from './parts/CurrenciesSelectionConfirmButton';\r\nimport SearchPageContainer from './parts/SearchPage_Container';\r\nimport BaseCurrencySelectForm from './parts/BaseCurrencySelection';\r\nimport createOptions from '../../functions/createOptions';\r\nimport Loader from '../../components/Spinner';\r\nimport { useSnackbar } from 'notistack';\r\nimport CryptoCurrencySelectForm from './parts/CryptoCurrencySelection';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { shallowEqual, useDispatch } from 'react-redux';\r\nimport { useLazyAxios } from 'use-axios-client';\r\nimport notForIE from '../../functions/notForIE';\r\nimport { ApiResponseType, baseCurrencyType, currencyCryptoType } from '../../types';\r\n\r\n/**\r\n * creates a page which enables choice of base currency and cryptocurrency\r\n * @returns page component\r\n */\r\nconst SelectionOfCurrencyAndCrypto = (): JSX.Element => {\r\n    let [currencyBase, setCurrencyBase] = React.useState<baseCurrencyType | null>(null);\r\n    let [currencyCrypto, setCurrencyCrypto] = React.useState<currencyCryptoType | null>(null);\r\n    const ref = React.useRef({\r\n        fetchingListActive: false,\r\n        listReceived: false,\r\n    });\r\n\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const listOfAllCryptos = useTypedSelector(state => state.listOfAllCryptos, shallowEqual);\r\n    const dispatch = useDispatch();\r\n    const [getListOfAllAvailableCryptos, { data: dataFromCryptosAPI, error: listError, loading }] =\r\n        useLazyAxios({\r\n            url: process.env.REACT_APP_ALL_CRYPTOS_URL,\r\n        });\r\n    useEffect(() => {\r\n        listError &&\r\n            enqueueSnackbar(`B≈ÇƒÖd pobierania listy kryptowalut`, {\r\n                variant: 'error',\r\n            });\r\n    }, [listError]);\r\n\r\n    useEffect(() => {\r\n        notForIE();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (dataFromCryptosAPI && !ref.current.listReceived) {\r\n            const options = createOptions(dataFromCryptosAPI as ApiResponseType);\r\n            dispatch({ type: 'LIST_OF_ALL_CRYPTOS_SET', payload: options });\r\n        }\r\n    }, [dataFromCryptosAPI, ref.current.listReceived]);\r\n\r\n    if (loading) return <Loader />;\r\n\r\n    if (!listOfAllCryptos && !ref.current.fetchingListActive) {\r\n        ref.current.fetchingListActive = true;\r\n        getListOfAllAvailableCryptos();\r\n    }\r\n\r\n    if (listOfAllCryptos && !ref.current.listReceived) {\r\n        ref.current.listReceived = true;\r\n    }\r\n\r\n    return (\r\n        <SearchPageContainer>\r\n            <CurrenciesSelectionConfirmButton\r\n                currencyBase={currencyBase as baseCurrencyType}\r\n                currencyCrypto={currencyCrypto as currencyCryptoType}\r\n            />\r\n            <BaseCurrencySelectForm\r\n                currencyBase={currencyBase as baseCurrencyType}\r\n                setCurrencyBase={setCurrencyBase}\r\n            />\r\n\r\n            <CryptoCurrencySelectForm\r\n                currencyCrypto={currencyCrypto as currencyCryptoType}\r\n                setCurrencyCrypto={setCurrencyCrypto}\r\n            />\r\n        </SearchPageContainer>\r\n    );\r\n};\r\n\r\nexport default SelectionOfCurrencyAndCrypto;\r\n","/**\r\n * Detects IE and forwards to infopage\r\n */\r\n\r\nexport default function breakWhenInternetExplorer(): void {\r\n    var ua = window.navigator.userAgent;\r\n    var isIE = /MSIE|Trident/.test(ua);\r\n\r\n    if (isIE) {\r\n        window.location.href = 'https://kiszuriwalilibori.github.io/IE/';\r\n    }\r\n}\r\n"],"names":["Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","ColorCircularProgress","color","CircularProgress","Loader","React","thickness","size","props","currencyBase","currencyCrypto","history","useHistory","SelectedCurrenciesContext","setCurrencyBase","setCurrencyCrypto","isEnabled","classes","pathToResults","label","undefined","className","disabled","onClick","push","MyFormControl","borderRadius","animation","border","padding","width","boxShadow","backgroundColor","fontFamily","paddingBottom","FormControl","FormLabel","component","RadioGroup","name","value","onChange","event","target","FormControlLabel","control","Radio","obj","data","Data","result","item","hasOwnProperty","CoinName","image","ImageUrl","useTypedSelector","useSelector","cryptos","state","listOfAllCryptos","shallowEqual","length","placeholder","selectValue","options","ref","fetchingListActive","listReceived","enqueueSnackbar","useSnackbar","dispatch","useDispatch","useLazyAxios","url","process","getListOfAllAvailableCryptos","dataFromCryptosAPI","listError","error","loading","useEffect","variant","ua","window","navigator","userAgent","test","location","href","notForIE","current","createOptions","type","payload"],"sourceRoot":""}