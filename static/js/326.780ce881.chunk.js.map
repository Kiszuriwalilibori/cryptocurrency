{"version":3,"file":"static/js/326.780ce881.chunk.js","mappings":"4NAmBA,EAXmB,SAACA,GAClB,MAAuFA,EAA/EC,QAAAA,OAAR,MAAkB,UAAlB,IAAuFD,EAA1DE,UAAAA,OAA7B,WAAuFF,EAAxCG,aAAAA,OAA/C,MAA8D,aAA9D,IAAuFH,EAAfI,MAAAA,OAAxE,MAAgF,GAAhF,EAGA,OACE,0BAAQC,UAAS,UAHG,aAGH,YAAsBJ,GAAWK,QAASH,EAAcI,UAAWL,GACjFE,I,8BCTDI,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,KAAM,CACJC,OAAQ,SACRC,QAAS,OACTC,cAAe,SACfC,OAAQ,QACRC,WAAY,SACZC,WAAY,cACZC,WAAY,SARER,CAUfS,EAAAA,GAEGC,GAA8BV,EAAAA,EAAAA,GAAW,CAC7CC,KAAM,CACJU,eAAgB,WAFgBX,CAIjCD,GAEGa,GAAwBZ,EAAAA,EAAAA,GAAW,CACvCC,KAAM,CACJY,MAAO,6BAFmBb,CAI3Bc,EAAAA,GAaH,EAReC,EAAAA,MAAW,WACxB,OACE,gBAACL,EAAD,KACE,gBAACE,EAAD,CAAuBI,UAAW,EAAGC,KAAM,W,mLCmDjD,EA/EiC,WAC/B,OAAwBC,EAAAA,EAAAA,UAAkC,MAA1D,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAoBC,EAAAA,EAAAA,MAApBD,gBAEJE,EAAqC,GAEnCC,GAAaC,EAAAA,EAAAA,cAAY,WAC7BP,GAAS,GACTG,EAAgB,6CAA8C,CAC5DK,QAAS,YAGV,IAEGC,EAAmC,WACvCP,GAAW,GAEPG,EAAiBK,OACnBZ,EAAQO,GAERC,KAIEK,EAAS,mCAAG,WAAOC,EAAqBC,GAA5B,yEACZD,EAAUF,QACRI,EAAMF,EAAUG,QAChBC,GAFgB,OAEOJ,GAE3BK,IAAAA,IACOH,EAAe,CAAEI,OAAQC,qEAC7BC,MAAK,SAAAvB,GACJ,IAAMwB,GAAW,UAAQxB,GAErBA,EAAKyB,eAAe,SAClBD,EAAYxB,KAAKyB,eAAeT,GAClCR,EAAiBkB,KAAKF,EAAYxB,KAAKgB,IAEvCR,EAAiBkB,KAAK,OAGpBP,EAAiBN,OACnBC,EAAUK,EAAkBH,GAE5BJ,MAGFP,GAAW,GAEXC,EAAgB,YAAD,OADDW,GAAY,mBACX,+CAAiE,CAC9EN,QAAS,gBAIdgB,OAAM,SAAAC,GACL,IAAIC,EAAOD,EAAIE,SAAWF,EAAIE,SAASC,OAASH,EAChDtB,EAAgB,SAAD,OAAUuB,EAAV,+CAAqDZ,GAAO,CACzEN,QAAS,YAEPQ,EAAiBN,OACnBC,EAAUK,EAAkBH,GAE5BJ,SAINT,GAAS,GACTG,EAAgB,0DAA2D,CACzEK,QAAS,WA5CG,2CAAH,wDAkDf,MAAO,CAAEX,KAAAA,EAAME,MAAAA,EAAOE,QAAAA,EAAS4B,yBAFE,SAACjB,EAAqBC,GAAtB,OAAqDF,EAAUC,EAAWC,MC7EzGiB,EAA6C,CAC/C,IAAK,aAGPA,EAAkB,IAAIC,MAAMD,EAAiB,CAC3CE,IAD2C,SACvCC,EAAQC,GACV,OAAIA,KAAUD,EACLA,EAAOC,GAEPA,KAKb,ICbaC,E,QAAwDC,I,oJCHxDC,GAAgB3D,EAAAA,EAAAA,GAAW,CACpCC,KAAM,CACF2D,aAAc,MACdC,UAAW,kCACXC,OAAQ,oBACRC,QAAS,OACTC,MAAO,QACP9D,OAAQ,QACR+D,UACI,qMACJC,gBAAiB,UACjBrD,MAAO,QACP,UAAW,CAAEiD,OAAQ,qBACrB,uBAAwB,CAAEjD,MAAO,QAASsD,WAAY,qBAAsBC,cAAe,OAC3F,uBAAwB,CAAEhE,cAAe,MAAOO,eAAgB,gBAChE,yCAA0C,CAAEE,MAAO,aAf9Bb,CAiB1BqE,EAAAA,GCmBH,EAlB+B,SAAC9E,GAC9B,IAAQ+E,EAAkC/E,EAAlC+E,aAAcC,EAAoBhF,EAApBgF,gBAKtB,OACE,gBAACZ,EAAD,KACE,gBAACa,EAAA,EAAD,CAAWC,UAAU,UAArB,sBACA,gBAACC,EAAA,EAAD,CAAY,aAAW,WAAWC,KAAK,WAAWC,MAAON,EAAcO,SAPtD,SAACC,GACpBP,EAAgBO,EAAMvB,OAAOqB,SAOzB,gBAACG,EAAA,EAAD,CAAkBH,MAAM,MAAMI,QAAS,gBAACC,EAAA,EAAD,MAAWtF,MAAM,QACxD,gBAACoF,EAAA,EAAD,CAAkBH,MAAM,MAAMI,QAAS,gBAACC,EAAA,EAAD,MAAWtF,MAAM,QACxD,gBAACoF,EAAA,EAAD,CAAkBH,MAAM,MAAMI,QAAS,gBAACC,EAAA,EAAD,MAAWtF,MAAM,W,sECpB1DiB,GAAwBZ,EAAAA,EAAAA,GAAW,CACvCC,KAAM,CACJY,MAAO,6BAFmBb,CAI3Bc,EAAAA,GA+CH,EA7C8B,SAAC,GAAuB,IAArBoE,EAAoB,EAApBA,SACzBC,EAAMpE,EAAAA,OAAa,CACvBqE,oBAAoB,EACpBC,cAAc,IAGR5D,GAAoBC,EAAAA,EAAAA,MAApBD,gBACF6D,GAAmB7B,EAAAA,EAAAA,KAAiB,SAAA8B,GAAK,OAAIA,EAAMD,mBAAkBE,EAAAA,IACrEC,GAAWC,EAAAA,EAAAA,MACjB,GAAgGC,EAAAA,EAAAA,cAAa,CAC3GC,IAAKnD,wDADP,eAAOoD,EAAP,YAA6CC,EAA7C,EAAuC3E,KAAiC4E,EAAxE,EAAiE1E,MAAkBE,EAAnF,EAAmFA,QA4BnF,OAzBAR,EAAAA,WAAgB,WACdgF,GACEtE,EAAgB,8CAAqC,CACnDK,QAAS,YAGZ,CAACiE,IAEJhF,EAAAA,WAAgB,WACd,GAAI+E,IAAuBX,EAAIa,QAAQX,aAAc,CACnD,IAAMY,GAAUC,EAAAA,EAAAA,IAAcJ,GAC9BL,EAAS,CAAEU,KAAM,0BAA2BC,QAASH,OAGtD,CAACH,EAAoBX,EAAIa,QAAQX,eAE/BC,GAAqBH,EAAIa,QAAQZ,qBACpCD,EAAIa,QAAQZ,oBAAqB,EACjCS,KAGEP,IAAqBH,EAAIa,QAAQX,eACnCF,EAAIa,QAAQX,cAAe,GAI3B,gCACGH,EACA3D,GAAW,gBAACX,EAAD,CAAuBI,UAAW,EAAGC,KAAM,QCnB7D,EAtBkD,SAAA1B,GAChD,IAAQ8G,EAAsC9G,EAAtC8G,eAAgBC,EAAsB/G,EAAtB+G,kBAClBC,GAAU9C,EAAAA,EAAAA,KAAiB,SAAA8B,GAAK,OAAIA,EAAMD,mBAAkBE,EAAAA,IAC5DgB,EAAQD,GAAWA,EAAQvE,OAAS,GAAK,sCAE/C,OACE,gBAAC,EAAD,KACE,yBAAOpC,UAAW4G,GAChB,gBAAC,IAAD,CACE5B,MAAOyB,EACPzG,UAAU,4BACV6G,YAAY,4BACZ5B,SAAU,SAAA6B,GACRJ,EAAkBI,IAEpBT,QAASM,O,4BCAnB,EAjBsB,SAAChH,GACrB,IAAQ+E,EAAiC/E,EAAjC+E,aAAc+B,EAAmB9G,EAAnB8G,eAChBM,GAAUC,EAAAA,EAAAA,MAChB,EAA+C7F,EAAAA,WAAiB8F,EAAAA,GAAxDtC,EAAR,EAAQA,gBAAiB+B,EAAzB,EAAyBA,kBACnB7G,KAAY6E,IAAgB+B,GAC5BS,EAAgBrH,EAAS,WAAO4G,EAAe1G,MAAtB,cAAiC2E,QAAiByC,EAE3EC,EAAgBjG,EAAAA,aAAkB,WACtCwD,EAAgBD,GAChBgC,EAAkBD,GACdS,GAAeH,EAAQ9D,KAAKiE,KAE/B,CAACA,IAEJ,OAAO,gBAAC,KAAD,CAAYtH,QAASC,EAAY,UAAY,GAAIA,UAAWA,EAAWC,aAAcsH,EAAerH,MAAM,qB,8BCEnH,EAvBkC,SAACJ,GACjC,IAAQ0H,EAAgB1H,EAAhB0H,YAER,OACE,gBAACC,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KACvB,gBAACC,EAAA,EAAD,CAAOC,UAAW,GAChB,gBAAC7G,EAAA,EAAD,CACE8G,GAAI,CACFC,QAAS,UACTvD,UAAW,EACXL,aAAc,EACd6D,EAAG,EACHC,SAAU,IACV7G,MAAO,UAGRoG,MChBX,EANalG,EAAAA,MAAW,kBACtB,0BAAQnB,UAAU,gBAChB,wDCQJ,ICUA,EDnBA,SAAqB+H,GACnB,OAAO,SAACpI,GAAD,OACL,gCACE,gBAAC,EAAD,MACA,gBAACoI,EAAcpI,KCerB,EAdyB,WACvB,MAAsCwB,EAAAA,SAAoC,MAA1E,eAAKuD,EAAL,KAAmBC,EAAnB,KACA,EAA0CxD,EAAAA,SAAsC,MAAhF,eAAKsF,EAAL,KAAqBC,EAArB,KAEA,OACE,2BAAS1G,UAAU,uBACjB,gBAAC,EAAD,CAAkC0E,aAAcA,EAA8B+B,eAAgBA,IAC9F,gBAAC,EAAD,CAAwB/B,aAAcA,EAAcC,gBAAiBA,IACrE,gBAAC,EAAD,CAA0B8B,eAAgBA,EAAkCC,kBAAmBA,KAChF,OAAdD,QAAc,IAAdA,OAAA,EAAAA,EAAgBY,cAAe,gBAAC,EAAD,CAA0BA,YAAaZ,EAAeY","sources":["components/BlueButton.tsx","components/Loader.tsx","hooks/useFetchHistoricalValues.ts","resources/errorDictionary.ts","hooks/useTypedSelector.ts","pages/SelectionPage/parts/BaseCurrencySelection/style.ts","pages/SelectionPage/parts/BaseCurrencySelection/BaseCurrencySelectForm.tsx","pages/SelectionPage/fetchListOfAllCryptos.tsx","pages/SelectionPage/parts/CryptoCurrencySelection/CryptoCurrencySelectForm.tsx","pages/SelectionPage/parts/ConfirmButton/ConfirmButton.tsx","pages/SelectionPage/parts/CryptoCurrencySelection/CryptoCurrencyDescription.tsx","pages/SelectionPage/parts/Logo.tsx","HOCs/withLogo.tsx","pages/SelectionPage/SelectionSection.tsx"],"sourcesContent":["import React from \"react\";\r\ninterface Props {\r\n  classes?: string;\r\n  isEnabled?: boolean;\r\n  clickHandler?: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n  label?: string;\r\n}\r\n\r\nconst BlueButton = (props: Props) => {\r\n  const { classes = \"enabled\", isEnabled = true, clickHandler = () => {}, label = \"\" } = props;\r\n  const baseClassName = \"BlueButton\";\r\n\r\n  return (\r\n    <button className={`${baseClassName} ${classes}`} onClick={clickHandler} disabled={!isEnabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n\r\n/**\r\n * todo niepokojące jest to mrygnięcie guzika na stronie wyszukiwania, powinien tylko zmieniać kolor\r\n * */\r\n","import * as React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst Container = withStyles({\r\n  root: {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n  },\r\n})(Box);\r\n\r\nconst ContainerVerticallyCentered = withStyles({\r\n  root: {\r\n    justifyContent: \"center\",\r\n  },\r\n})(Container);\r\n\r\nconst ColorCircularProgress = withStyles({\r\n  root: {\r\n    color: \"rgba(122, 194, 33, 0.8);\",\r\n  },\r\n})(CircularProgress);\r\n/**\r\n * creates memoised spinner that indicates loading state\r\n * @returns spinner component\r\n */\r\nconst Loader = React.memo(() => {\r\n  return (\r\n    <ContainerVerticallyCentered>\r\n      <ColorCircularProgress thickness={5} size={100} />\r\n    </ContainerVerticallyCentered>\r\n  );\r\n});\r\n\r\nexport default Loader;\r\n","import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { BaseCurrency, HistoricalPrices } from \"types\";\r\n\r\nconst useFetchHistoricalValues = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    enqueueSnackbar(`No data fetched at all for given endpoints`, {\r\n      variant: \"error\",\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; /// co ta linika robi, tylko kopię tworzy?\r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          const weatherData = { ...data };\r\n\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (weatherData.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(weatherData.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(\"n/a\");\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            enqueueSnackbar(`Data for ${label} was broken, corrupted or otherwise invalid`, {\r\n              variant: \"warning\",\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          enqueueSnackbar(`Error ${code} encountered when fetching data for ${URL}`, {\r\n            variant: \"warning\",\r\n          });\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      enqueueSnackbar(`Empty array of URLs passed to useAxiosArray as argument`, {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n  const runFetchHistoricalValues = (endpoints: string[], baseCurrency: BaseCurrency) => fetchData(endpoints, baseCurrency);\r\n\r\n  return { data, error, loading, runFetchHistoricalValues };\r\n};\r\n\r\nexport default useFetchHistoricalValues;\r\n\r\n/**\r\n * todo: chyba dobre miejsce na useBoolean poza tym wszędzie mamy NotAvailable a tu \"n/a\"\r\n */\r\n","/**\r\n * Not in use. perhaps in the future\r\n */\r\n\r\nlet errorDictionary: { [key: string]: string } = {\r\n  404: \"Not found\",\r\n};\r\n\r\nerrorDictionary = new Proxy(errorDictionary, {\r\n  get(target, phrase: string) {\r\n    if (phrase in target) {\r\n      return target[phrase];\r\n    } else {\r\n      return phrase;\r\n    }\r\n  },\r\n});\r\n\r\nexport default errorDictionary;\r\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootStateType } from '../components/AppProvider';\r\n/**\r\n * prepares useSelectorHook which knows RootStateType\r\n */\r\nexport const useTypedSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nexport const MyFormControl = withStyles({\r\n    root: {\r\n        borderRadius: '2px',\r\n        animation: 'fade_in 1s ease-in-out forwards',\r\n        border: '2px solid #1E1F26',\r\n        padding: '20px',\r\n        width: '300px',\r\n        margin: '2vh 0',\r\n        boxShadow:\r\n            'inset 0 0 5px #1E1F26, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n        backgroundColor: '#2C303A',\r\n        color: 'white',\r\n        '&:hover': { border: '2px solid #EE760A' },\r\n        '& .MuiFormLabel-root': { color: 'white', fontFamily: '\"Lato\", sans-serif', paddingBottom: '5px' },\r\n        '& .MuiFormGroup-root': { flexDirection: 'row', justifyContent: 'space-around' },\r\n        '& .MuiRadio-colorSecondary.Mui-checked': { color: '#EE760A' },\r\n    },\r\n})(FormControl);\r\n","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\nimport { MyFormControl } from \"./style\";\r\nimport { BaseCurrency } from \"types\";\r\n\r\ninterface BaseCurrencyChoiceType {\r\n  currencyBase: BaseCurrency | null;\r\n  setCurrencyBase: Function;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n  const { currencyBase, setCurrencyBase } = props;\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCurrencyBase(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <MyFormControl>\r\n      <FormLabel component=\"legend\">Waluta odniesienia</FormLabel>\r\n      <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n        <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n        <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n        <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n      </RadioGroup>\r\n    </MyFormControl>\r\n  );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n\r\n/**\r\n * todo wynika, że rozszerzenie typu tutaj w niczym nie przeszkadza a mozna się pozbyć asercji w wywołaniu\r\n */\r\n","import * as React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { useLazyAxios } from \"use-axios-client\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { shallowEqual, useDispatch } from \"react-redux\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { ApiResponse } from \"types\";\r\nimport { useTypedSelector } from \"hooks\";\r\nimport { createOptions } from \"functions\";\r\n\r\nconst ColorCircularProgress = withStyles({\r\n  root: {\r\n    color: \"rgba(122, 194, 33, 0.8);\",\r\n  },\r\n})(CircularProgress);\r\n\r\nconst FetchListOfAllCryptos = ({ children }: any) => {\r\n  const ref = React.useRef({\r\n    fetchingListActive: false,\r\n    listReceived: false,\r\n  });\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const listOfAllCryptos = useTypedSelector(state => state.listOfAllCryptos, shallowEqual);\r\n  const dispatch = useDispatch();\r\n  const [getListOfAllAvailableCryptos, { data: dataFromCryptosAPI, error: listError, loading }] = useLazyAxios({\r\n    url: process.env.REACT_APP_ALL_CRYPTOS_URL,\r\n  });\r\n  React.useEffect(() => {\r\n    listError &&\r\n      enqueueSnackbar(`Błąd pobierania listy kryptowalut`, {\r\n        variant: \"error\",\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [listError]);\r\n\r\n  React.useEffect(() => {\r\n    if (dataFromCryptosAPI && !ref.current.listReceived) {\r\n      const options = createOptions(dataFromCryptosAPI as ApiResponse);\r\n      dispatch({ type: \"LIST_OF_ALL_CRYPTOS_SET\", payload: options });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dataFromCryptosAPI, ref.current.listReceived]);\r\n\r\n  if (!listOfAllCryptos && !ref.current.fetchingListActive) {\r\n    ref.current.fetchingListActive = true;\r\n    getListOfAllAvailableCryptos();\r\n  }\r\n\r\n  if (listOfAllCryptos && !ref.current.listReceived) {\r\n    ref.current.listReceived = true;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {children}\r\n      {loading && <ColorCircularProgress thickness={5} size={100} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FetchListOfAllCryptos;\r\n","import * as React from \"react\";\r\nimport VirtualizedSelect from \"react-virtualized-select\";\r\nimport { useTypedSelector } from \"hooks\";\r\nimport { shallowEqual } from \"react-redux\";\r\nimport { CurrencyCrypto } from \"types\";\r\n\r\nimport FetchListOfAllCryptos from \"pages/SelectionPage/fetchListOfAllCryptos\";\r\ninterface Props {\r\n  setCurrencyCrypto: Function;\r\n  currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<Props> = props => {\r\n  const { currencyCrypto, setCurrencyCrypto } = props;\r\n  const cryptos = useTypedSelector(state => state.listOfAllCryptos, shallowEqual);\r\n  const style = cryptos && cryptos.length ? \"\" : \"inactivatedCryptoCurrencySelectForm\";\r\n\r\n  return (\r\n    <FetchListOfAllCryptos>\r\n      <label className={style}>\r\n        <VirtualizedSelect\r\n          value={currencyCrypto}\r\n          className=\"selector-item virtualized\"\r\n          placeholder=\"Wybierz kryptowalutę\"\r\n          onChange={selectValue => {\r\n            setCurrencyCrypto(selectValue);\r\n          }}\r\n          options={cryptos as any}\r\n        />\r\n      </label>\r\n    </FetchListOfAllCryptos>\r\n  );\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import * as React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\nimport { BlueButton } from \"components\";\r\n\r\ninterface Props {\r\n  currencyBase: BaseCurrency;\r\n  currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosesn currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst ConfirmButton = (props: Props): JSX.Element => {\r\n  const { currencyBase, currencyCrypto } = props;\r\n  const history = useHistory();\r\n  const { setCurrencyBase, setCurrencyCrypto } = React.useContext(SelectedCurrenciesContext);\r\n  const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n  const pathToResults = isEnabled ? `/${currencyCrypto.label} / ${currencyBase}` : undefined;\r\n\r\n  const confirmChoice = React.useCallback(() => {\r\n    setCurrencyBase(currencyBase);\r\n    setCurrencyCrypto(currencyCrypto);\r\n    if (pathToResults) history.push(pathToResults);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pathToResults]);\r\n\r\n  return <BlueButton classes={isEnabled ? \"enabled\" : \"\"} isEnabled={isEnabled} clickHandler={confirmChoice} label=\"Pokaż kurs\" />;\r\n};\r\n\r\nexport default ConfirmButton;\r\n","import * as React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\n\r\ninterface Props {\r\n  description: string;\r\n}\r\nconst CryptoCurrencyDescription = (props: Props) => {\r\n  const { description } = props;\r\n\r\n  return (\r\n    <Fade in={true} timeout={1000}>\r\n      <Paper elevation={1}>\r\n        <Box\r\n          sx={{\r\n            bgcolor: \"#1076AB\",\r\n            boxShadow: 1,\r\n            borderRadius: 1,\r\n            p: 2,\r\n            maxWidth: 300,\r\n            color: \"white\",\r\n          }}\r\n        >\r\n          {description}\r\n        </Box>\r\n      </Paper>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default CryptoCurrencyDescription;\r\n/**\r\n * todo pytanie czy description powinno być w tym kolorze, bo to jest kolejny kolor w apce. Można by zdjac kolor z gusika. Poza tym mogłby mieć krawędź jak wszystkie na stronie pogrubioną\r\n */\r\n","import * as React from \"react\";\r\n\r\nconst Logo = React.memo(() => (\r\n  <header className=\"search__logo\">\r\n    <h1>CryptoCurrency Tracker</h1>\r\n  </header>\r\n));\r\n\r\nexport default Logo;\r\n","import * as React from \"react\";\r\nimport Logo from \"pages/SelectionPage/parts/Logo\";\r\n\r\nfunction withLogo<T>(Component: React.ComponentType<React.PropsWithChildren<T>>) {\r\n  return (props: React.PropsWithChildren<T>) => (\r\n    <>\r\n      <Logo />\r\n      <Component {...props} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withLogo;\r\n","import * as React from \"react\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport BaseCurrencySelectForm from \"./parts/BaseCurrencySelection\";\r\nimport CryptoCurrencySelectForm from \"./parts/CryptoCurrencySelection\";\r\nimport CurrenciesSelectionConfirmButton from \"./parts/ConfirmButton\";\r\nimport CryptoCurrencyDecription from \"./parts/CryptoCurrencySelection/CryptoCurrencyDescription\";\r\nimport withLogo from \"../../HOCs/withLogo\";\r\n\r\nconst SelectionSection = () => {\r\n  let [currencyBase, setCurrencyBase] = React.useState<BaseCurrency | null>(null);\r\n  let [currencyCrypto, setCurrencyCrypto] = React.useState<CurrencyCrypto | null>(null);\r\n\r\n  return (\r\n    <section className=\"selection-container\">\r\n      <CurrenciesSelectionConfirmButton currencyBase={currencyBase as BaseCurrency} currencyCrypto={currencyCrypto as CurrencyCrypto} />\r\n      <BaseCurrencySelectForm currencyBase={currencyBase} setCurrencyBase={setCurrencyBase} />\r\n      <CryptoCurrencySelectForm currencyCrypto={currencyCrypto as CurrencyCrypto} setCurrencyCrypto={setCurrencyCrypto} />\r\n      {currencyCrypto?.description && <CryptoCurrencyDecription description={currencyCrypto.description} />}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default withLogo(SelectionSection);\r\n"],"names":["props","classes","isEnabled","clickHandler","label","className","onClick","disabled","Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","ColorCircularProgress","color","CircularProgress","React","thickness","size","useState","data","setData","error","setError","loading","setLoading","enqueueSnackbar","useSnackbar","historicalPrices","fatalError","useCallback","variant","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","weatherData","hasOwnProperty","push","catch","err","code","response","status","runFetchHistoricalValues","errorDictionary","Proxy","get","target","phrase","useTypedSelector","useSelector","MyFormControl","borderRadius","animation","border","padding","width","boxShadow","backgroundColor","fontFamily","paddingBottom","FormControl","currencyBase","setCurrencyBase","FormLabel","component","RadioGroup","name","value","onChange","event","FormControlLabel","control","Radio","children","ref","fetchingListActive","listReceived","listOfAllCryptos","state","shallowEqual","dispatch","useDispatch","useLazyAxios","url","getListOfAllAvailableCryptos","dataFromCryptosAPI","listError","current","options","createOptions","type","payload","currencyCrypto","setCurrencyCrypto","cryptos","style","placeholder","selectValue","history","useHistory","SelectedCurrenciesContext","pathToResults","undefined","confirmChoice","description","Fade","in","timeout","Paper","elevation","sx","bgcolor","p","maxWidth","Component"],"sourceRoot":""}