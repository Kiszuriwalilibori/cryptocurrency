{"version":3,"file":"static/js/844.13706a14.chunk.js","mappings":"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","sources":["components/BlueButton/BlueButton.tsx","hooks/useFetchHistoricalPrices.ts","resources/errorDictionary.ts","hooks/useMessage.ts","hooks/useCheckApiKey.ts","hooks/useConfirm.ts","pages/SelectionPage/parts/BaseCurrencySelection/BaseCurrencySelectForm.tsx","pages/SelectionPage/fetchListOfAllCryptos.tsx","pages/SelectionPage/parts/CryptoCurrencySelection/CryptoCurrencySelectForm.tsx","pages/SelectionPage/parts/Logo/Logo.tsx","HOCs/withLogo.tsx","pages/SelectionPage/SelectionPage.tsx","styles/sxStyles.js"],"sourcesContent":["import \"./_BlueButton.scss\";\r\n\r\ninterface Props {\r\n  classes?: string;\r\n  isEnabled?: boolean;\r\n  clickHandler?: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n  label?: string;\r\n}\r\n\r\nconst BlueButton = (props: Props) => {\r\n  const { classes = \"enabled\", isEnabled = true, clickHandler = () => {}, label = \"\" } = props;\r\n  const baseClassName = \"BlueButton\";\r\n\r\n  return (\r\n    <button className={`${baseClassName} ${classes}`} onClick={clickHandler} disabled={!isEnabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const showMessage = useMessage();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; \r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (data.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(data.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n    }\r\n  };\r\n  const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","/**\r\n * Not in use. perhaps in the future\r\n */\r\n\r\nlet errorDictionary: { [key: string]: string } = {\r\n  404: \"Not found\",\r\n};\r\n\r\nerrorDictionary = new Proxy(errorDictionary, {\r\n  get(target, phrase: string) {\r\n    if (phrase in target) {\r\n      return target[phrase];\r\n    } else {\r\n      return phrase;\r\n    }\r\n  },\r\n});\r\n\r\nexport default errorDictionary;\r\n","import { useSnackbar } from \"notistack\";\r\n\r\nconst useMessage = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showMessage = {\r\n    info: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"info\" });\r\n    },\r\n\r\n    error: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"error\" });\r\n    },\r\n\r\n    success: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"success\" });\r\n    },\r\n\r\n    warning: function (str: string) {\r\n      enqueueSnackbar(str, { variant: \"warning\" });\r\n    },\r\n  };\r\n\r\n  return showMessage;\r\n};\r\n\r\nexport default useMessage;\r\n","import { useRef } from \"react\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useCheckApiKey = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const isAPIKeyAvailable = useRef(false);\r\n\r\n    if (!process.env.REACT_APP_API_KEY) {\r\n        showMessage.error(`No API key available for application`);\r\n    } else {\r\n        isAPIKeyAvailable.current = true;\r\n    }\r\n    return isAPIKeyAvailable.current;\r\n};\r\n\r\nexport default useCheckApiKey;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    currencyBase: BaseCurrency;\r\n    currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosen currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst useConfirmChoice = (props: Props) => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const navigate = useNavigate();\r\n    const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n    const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n    const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n    const confirmChoice = useCallback(() => {\r\n        setCurrencyBase(currencyBase);\r\n        setCurrencyCrypto(currencyCrypto);\r\n        if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pathToResults]);\r\n\r\n    return { confirmChoice, isEnabled };\r\n};\r\n\r\nexport default useConfirmChoice;\r\n","import Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport Form from \"@mui/material/FormControl\";\r\n\r\nimport { formStyle, radioStyle, legendStyle } from \"styles/sxStyles\";\r\nimport { BaseCurrency } from \"types\";\r\n\r\ninterface BaseCurrencyChoiceType {\r\n    currencyBase: BaseCurrency | null;\r\n    setCurrencyBase: Function;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n    const { currencyBase, setCurrencyBase } = props;\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrencyBase(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Form sx={{ ...formStyle }}>\r\n            <FormLabel component=\"legend\" sx={{ ...legendStyle }}>\r\n                Waluta odniesienia\r\n            </FormLabel>\r\n            <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n                <FormControlLabel value=\"PLN\" control={<Radio sx={{ ...radioStyle }} />} label=\"PLN\" />\r\n                <FormControlLabel value=\"USD\" control={<Radio sx={{ ...radioStyle }} />} label=\"USD\" />\r\n                <FormControlLabel value=\"EUR\" control={<Radio sx={{ ...radioStyle }} />} label=\"EUR\" />\r\n            </RadioGroup>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n","import { useRef, useEffect } from \"react\";\r\nimport { useLazyAxios } from \"use-axios-client\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { useMessage } from \"hooks\";\r\nimport { progressStyle } from \"styles/sxStyles\";\r\nimport Progress from \"@mui/material/CircularProgress\";\r\n\r\nimport { baseURL } from \"config\";\r\nimport { setListOfAllCryptos, getListOfCryptos } from \"../../reducer/cryptosListSlice\";\r\n\r\nconst FetchListOfAllCryptos = ({ children }: any) => {\r\n    const ref = useRef({\r\n        fetchingListActive: false,\r\n        listReceived: false,\r\n    });\r\n    const showMessage = useMessage();\r\n    const listOfAllCryptos = useSelector(getListOfCryptos, shallowEqual);\r\n    const dispatch = useDispatch();\r\n    const [getListOfAllAvailableCryptos, { data: dataFromCryptosAPI, error: listError, loading }] = useLazyAxios({\r\n        url: baseURL.get(\"all\"),\r\n    });\r\n\r\n    useEffect(() => {\r\n        listError && showMessage.error(`Błąd pobierania listy kryptowalut`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [listError]);\r\n\r\n    useEffect(() => {\r\n        if (dataFromCryptosAPI && !ref.current.listReceived) {\r\n            dispatch(setListOfAllCryptos(dataFromCryptosAPI));\r\n            showMessage.success(`Pomyślnie pobrano listę dostępnych kryptowalut`);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dataFromCryptosAPI, ref.current.listReceived]);\r\n\r\n    if (!listOfAllCryptos && !ref.current.fetchingListActive) {\r\n        ref.current.fetchingListActive = true;\r\n        getListOfAllAvailableCryptos(); // triggers fetch list async action\r\n    }\r\n\r\n    if (listOfAllCryptos && !ref.current.listReceived) {\r\n        ref.current.listReceived = true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n            {loading && <Progress sx={{ ...progressStyle }} thickness={5} size={100} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FetchListOfAllCryptos;\r\n","import * as React from \"react\";\r\nimport VirtualizedSelect from \"react-virtualized-select\";\r\nimport FetchListOfAllCryptos from \"pages/SelectionPage/fetchListOfAllCryptos\";\r\n\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { CurrencyCrypto } from \"types\";\r\nimport { getListOfCryptos } from \"reducer/cryptosListSlice\";\r\n\r\nimport \"./_CryptoCurrencySelectForm.scss\";\r\n\r\ninterface Props {\r\n    setCurrencyCrypto: Function;\r\n    currencyCrypto: CurrencyCrypto | undefined;\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<Props> = props => {\r\n    const { currencyCrypto, setCurrencyCrypto } = props;\r\n    const cryptos = useSelector(getListOfCryptos, shallowEqual);\r\n    const style = cryptos && cryptos.length ? \"\" : \"inactivatedSelect\";\r\n\r\n    return (\r\n        <FetchListOfAllCryptos>\r\n            <label className={style}>\r\n                <VirtualizedSelect\r\n                    value={currencyCrypto}\r\n                    className=\"virtualized-select\"\r\n                    placeholder=\"Wybierz kryptowalutę\"\r\n                    onChange={(selectValue: any) => {\r\n                        setCurrencyCrypto(selectValue);\r\n                    }}\r\n                    options={cryptos as any}\r\n                />\r\n            </label>\r\n        </FetchListOfAllCryptos>\r\n    );\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import { memo } from \"react\";\r\n\r\nimport \"./_logo.scss\";\r\n\r\nconst Logo = memo(() => (\r\n  <header className=\"logo\">\r\n    <h1>CryptoCurrency Tracker</h1>\r\n  </header>\r\n));\r\n\r\nexport default Logo;\r\n","import Logo from \"pages/SelectionPage/parts/Logo\";\r\n\r\nfunction withLogo<T>(Component: React.ComponentType<T>) {\r\n  return (props: React.PropsWithChildren<T>) => (\r\n    <>\r\n      <Logo />\r\n      <Component {...props} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withLogo;\r\n","import BaseCurrencySelectForm from \"./parts/BaseCurrencySelection\";\r\nimport CryptoCurrencySelectForm from \"./parts/CryptoCurrencySelection\";\r\nimport withLogo from \"HOCs/withLogo\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, UseConfirmChoice } from \"types\";\r\nimport { useCheckApiKey, useConfirmChoice } from \"hooks\";\r\nimport { lazy, useState, Suspense } from \"react\";\r\n\r\nimport \"./_SelectionSection.scss\";\r\nimport BlueButton from \"components/BlueButton\";\r\n\r\nconst Description = lazy(() => import(\"./parts/CryptoCurrencySelection/CryptoCurrencyDescription\"));\r\n\r\nconst SelectionPage = () => {\r\n    const isApiKeyAvailable = useCheckApiKey();\r\n\r\n    let [currencyBase, setCurrencyBase] = useState<BaseCurrency | null>(null);\r\n    let [currencyCrypto, setCurrencyCrypto] = useState<CurrencyCrypto | undefined>(undefined);\r\n\r\n    const { confirmChoice, isEnabled } = useConfirmChoice({ currencyBase, currencyCrypto } as UseConfirmChoice);\r\n\r\n    if (!isApiKeyAvailable) return null;\r\n    return (\r\n        <section className=\"SelectionSection\">\r\n            <BlueButton\r\n                classes={isEnabled ? \"enabled\" : \"\"}\r\n                isEnabled={isEnabled}\r\n                clickHandler={confirmChoice}\r\n                label=\"Pokaż kurs\"\r\n            />\r\n\r\n            <BaseCurrencySelectForm currencyBase={currencyBase} setCurrencyBase={setCurrencyBase} />\r\n            <CryptoCurrencySelectForm currencyCrypto={currencyCrypto} setCurrencyCrypto={setCurrencyCrypto} />\r\n            {currencyCrypto?.description && (\r\n                <Suspense fallback={null}>\r\n                    <Description description={currencyCrypto.description} />\r\n                </Suspense>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default withLogo(SelectionPage);\r\n","export const localBrown = \"#EE760A\";\r\nexport const localGrey = \"#1E1F26\";\r\n\r\nexport const progressStyle = {\r\n    color: \"rgba(122, 194, 33, 0.8);\",\r\n};\r\n\r\nexport const loaderContainerStyle = {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n    justifyContent: \"center\",\r\n};\r\n\r\nexport const tooltipStyle = {\r\n    backgroundColor: \"#F5C200\",\r\n    border: `1px solid ${localBrown}`,\r\n    boxShadow: `inset 0 0 5px ${localBrown}`,\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    fontSize: 11,\r\n};\r\n\r\nexport const cryptoContainer = {\r\n    width: \"100%\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"15px\",\r\n    marginRight: \"auto\",\r\n    marginLeft: \"auto\",\r\n    marginTop: \"30vh\",\r\n};\r\n\r\nexport const formStyle = {\r\n    borderRadius: \"2px\",\r\n    animation: \"fade_in 0.1s ease-in-out forwards\",\r\n    border: `2px solid ${localGrey}`,\r\n    padding: \"20px\",\r\n    width: \"300px\",\r\n    margin: \"2vh 0\",\r\n    boxShadow: `inset 0 0 5px ${localGrey}, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)`,\r\n    backgroundColor: \"#2C303A\",\r\n    color: \"white\",\r\n    tabindex: \"0\",\r\n    \"&:hover\": { border: `2px solid ${localBrown}` },\r\n    \"&:focus\": { border: \"2px solid red\" },\r\n    \"& .MuiFormLabel-root\": { color: \"white\", fontFamily: '\"Lato\", sans-serif', paddingBottom: \"5px\" },\r\n    \"& .MuiFormGroup-root\": { flexDirection: \"row\", justifyContent: \"space-around\" },\r\n};\r\n\r\nexport const radioStyle = {\r\n    \"&.Mui-checked\": {\r\n        color: localBrown,\r\n    },\r\n};\r\n\r\nexport const legendStyle = {\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    \"&:focus\": { color: \"white\" },\r\n    \"&.Mui-focused\": { color: \"white\" },\r\n};\r\n"],"names":["props","classes","isEnabled","clickHandler","label","className","onClick","disabled","useState","data","setData","error","setError","loading","setLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","errorDictionary","Proxy","get","target","phrase","enqueueSnackbar","useSnackbar","info","str","variant","success","isAPIKeyAvailable","useRef","current","currencyBase","navigate","useNavigate","useContext","SelectedCurrenciesContext","setCurrencyBase","setCurrencyCrypto","pathToResults","undefined","confirmChoice","state","results","sx","formStyle","FormLabel","component","legendStyle","RadioGroup","name","value","onChange","event","FormControlLabel","control","Radio","radioStyle","children","ref","fetchingListActive","listReceived","listOfAllCryptos","useSelector","getListOfCryptos","shallowEqual","dispatch","useDispatch","useLazyAxios","url","baseURL","getListOfAllAvailableCryptos","dataFromCryptosAPI","listError","useEffect","setListOfAllCryptos","progressStyle","thickness","size","cryptos","style","placeholder","selectValue","options","memo","Component","Description","lazy","withLogo","isApiKeyAvailable","useCheckApiKey","useConfirmChoice","BlueButton","description","Suspense","fallback","localBrown","localGrey","color","loaderContainerStyle","margin","display","flexDirection","height","alignItems","background","paddingTop","justifyContent","tooltipStyle","backgroundColor","border","boxShadow","fontSize","cryptoContainer","width","paddingRight","paddingLeft","marginRight","marginLeft","marginTop","borderRadius","animation","padding","tabindex","fontFamily","paddingBottom","textAlign"],"sourceRoot":""}