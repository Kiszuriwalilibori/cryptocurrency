{"version":3,"file":"static/js/914.75489ac0.chunk.js","mappings":"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","sources":["hooks/useFetchHistoricalPrices.ts","hooks/useCheckApiKey.ts","hooks/useConfirm.ts","functions/createOptions.ts","hooks/useFetchListOfCryptos.ts","hooks/useBoolean.ts","hooks/useDebouncedCallback.ts","hooks/useDelayedCondition.ts","pages/SelectionPage/components/CryptoCurrencyDescription.tsx","pages/SelectionPage/components/BaseCurrencySelectForm.tsx","pages/SelectionPage/components/CryptoCurrencySelectForm.tsx","pages/SelectionPage/components/Logo.tsx","pages/SelectionPage/SelectionPage.tsx","pages/SelectionPage/styles/BaseCurrencyForm.tsx","pages/SelectionPage/styles/Description.tsx","pages/SelectionPage/styles/Legend.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage, useBoolean } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n    const [data, setData] = useState<HistoricalPrices | null>(null);\r\n    const [error, setError] = useState(false);\r\n    const [loading, , stopLoading] = useBoolean(true);\r\n    const showMessage = useMessage();\r\n\r\n    let historicalPrices: HistoricalPrices = [];\r\n\r\n    const fatalError = useCallback(() => {\r\n        setError(true);\r\n        showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const theEndOfRecursiveFetchLoopHandle = () => {\r\n        stopLoading();\r\n\r\n        if (historicalPrices.length) {\r\n            setData(historicalPrices);\r\n        } else {\r\n            fatalError();\r\n        }\r\n    };\r\n\r\n    const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n        if (endpoints.length) {\r\n            let URL = endpoints.shift();\r\n            let reducedEndpoints = [...endpoints];\r\n\r\n            URL &&\r\n                axios\r\n                    .get(URL, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n                    .then(data => {\r\n                        if (data.hasOwnProperty(\"data\")) {\r\n                            if (data.data.hasOwnProperty(baseCurrency)) {\r\n                                historicalPrices.push(data.data[baseCurrency]);\r\n                            } else {\r\n                                historicalPrices.push(NotAvailable.na);\r\n                            }\r\n\r\n                            if (reducedEndpoints.length) {\r\n                                fetchData(reducedEndpoints, baseCurrency);\r\n                            } else {\r\n                                theEndOfRecursiveFetchLoopHandle();\r\n                            }\r\n                        } else {\r\n                            stopLoading();\r\n                            const label = URL ? URL : \"unknown crypto\";\r\n                            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        let code = err.response ? err.response.status : err;\r\n                        showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n                        if (reducedEndpoints.length) {\r\n                            fetchData(reducedEndpoints, baseCurrency);\r\n                        } else {\r\n                            theEndOfRecursiveFetchLoopHandle();\r\n                        }\r\n                    });\r\n        } else {\r\n            setError(true);\r\n            showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n        }\r\n    };\r\n    const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n        fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n    };\r\n\r\n    return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","import { useRef } from \"react\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useCheckApiKey = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const isAPIKeyAvailable = useRef(false);\r\n\r\n    if (!process.env.REACT_APP_API_KEY) {\r\n        showMessage.error(`No API key available for application`);\r\n    } else {\r\n        isAPIKeyAvailable.current = true;\r\n    }\r\n    return isAPIKeyAvailable.current;\r\n};\r\n\r\nexport default useCheckApiKey;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    currencyBase: BaseCurrency;\r\n    currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosen currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst useConfirmChoice = (props: Props) => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const navigate = useNavigate();\r\n    const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n    const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n    const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n    const confirmChoice = useCallback(() => {\r\n        setCurrencyBase(currencyBase);\r\n        setCurrencyCrypto(currencyCrypto);\r\n        if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pathToResults]);\r\n\r\n    return { confirmChoice, isEnabled };\r\n};\r\n\r\nexport default useConfirmChoice;\r\n","import { ApiResponse } from \"types\";\r\n/**\r\n * Takes response from list of all cryptos API and creates array with desired content\r\n * @param obj\r\n * @returns array with code, name and link to logo of all available cryptocurrencies\r\n */\r\nconst createOptions = (obj: ApiResponse) => {\r\n    const data = obj.data.Data;\r\n\r\n    const result = [];\r\n\r\n    for (let item in data) {\r\n        if (data.hasOwnProperty(item)) {\r\n            result.push({\r\n                value: item,\r\n                label: data[item].CoinName,\r\n                image: data[item].ImageUrl,\r\n                description: data[item].Description,\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default createOptions;\r\n","import axios from \"axios\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { BASE_URL } from \"config\";\r\nimport { useQuery } from \"react-query\";\r\nimport useMessage from \"./useMessage\";\r\nimport createOptions from \"functions/createOptions\";\r\nimport { ApiResponse } from \"types/types\";\r\n\r\nconst useFetchListOfCryptos = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const { isLoading, error, data } = useQuery([URL], () => axios(BASE_URL.get(\"all\")), {\r\n        staleTime: 300000,\r\n        cacheTime: 300000,\r\n        select: data => createOptions(data as unknown as ApiResponse),\r\n    });\r\n\r\n    useEffect(() => {\r\n        error && showMessage.error(`Błąd pobierania listy kryptowalut`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [error]);\r\n\r\n    return { isLoading, data };\r\n};\r\n\r\nexport default useFetchListOfCryptos;\r\n","import { useCallback, useState } from \"react\";\r\n\r\nfunction useBoolean(initialValue: boolean = false) {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    function setTrue() {\r\n        setValue(true);\r\n    }\r\n\r\n    const setFalse = useCallback(() => {\r\n        setValue(false);\r\n    }, []);\r\n\r\n    const toggle = useCallback(() => {\r\n        setValue(!value);\r\n    }, [value]);\r\n\r\n    return [value, setTrue, setFalse, toggle] as const;\r\n}\r\n\r\nexport default useBoolean;\r\n","import { useCallback } from \"react\";\nimport debounce from \"lodash/debounce\";\n\n// export const useDebouncedCallback = (fn: Function, args: any): React.MouseEventHandler<HTMLButtonElement> => {\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//     const result = useCallback(\n//         debounce(() => {\n//             fn(args);\n//         }, 200),\n//         [fn]\n//     );\n//     return result;\n// };\n\n// export default useDebouncedCallback;\n\nfunction useDebouncedCallback<T>(fn: Function, args?: any): React.MouseEventHandler<T> {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const result: React.MouseEventHandler<T> = useCallback(\n        debounce(() => {\n            fn(args);\n        }, 200),\n        [fn, args]\n    );\n    return result;\n}\n\nexport default useDebouncedCallback;\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst DELAY = 1000;\r\nconst DURATION = 1000;\r\n\r\nexport const useDelayedCondition = (condition: boolean, delay = DELAY, duration = DURATION) => {\r\n  const [delayedCondition, setDelayedCondition] = useState(false);\r\n  const delayTimeout = useRef(undefined as undefined | NodeJS.Timeout);\r\n  const startTime = useRef(undefined as undefined | number);\r\n  const durationTimeout = useRef(undefined as undefined | NodeJS.Timeout);\r\n\r\n  useEffect(() => {\r\n    if (condition) {\r\n      startTime.current = Date.now();\r\n      delayTimeout.current = setTimeout(() => {\r\n        setDelayedCondition(true);\r\n      }, delay);\r\n    }\r\n    if (!condition) {\r\n      if (startTime.current) {\r\n        if (Date.now() >= startTime.current + delay) {\r\n          durationTimeout.current = setTimeout(() => {\r\n            delayTimeout.current && clearTimeout(delayTimeout.current);\r\n            setDelayedCondition(false);\r\n          }, duration - (Date.now() - (startTime.current + DELAY)));\r\n        }\r\n        if (Date.now() < startTime.current + delay) {\r\n          delayTimeout.current && clearTimeout(delayTimeout.current);\r\n          setDelayedCondition(false);\r\n        }\r\n      }\r\n    }\r\n    return () => {\r\n      delayTimeout.current && clearTimeout(delayTimeout.current);\r\n      durationTimeout.current && clearTimeout(durationTimeout.current);\r\n    };\r\n  }, [condition]);\r\n\r\n  return delayedCondition;\r\n};\r\n\r\nexport default useDelayedCondition;\r\n","import Paper from \"@mui/material/Paper\";\r\nimport Fade from \"@mui/material/Fade\";\r\n\r\nimport { memo } from \"react\";\r\n\r\nimport { Description } from \"../styles\";\r\n\r\ninterface Props {\r\n    description: string;\r\n}\r\nconst CryptoCurrencyDescription = (props: Props) => {\r\n    const { description } = props;\r\n\r\n    return (\r\n        <Fade in={true} timeout={1000}>\r\n            <Paper elevation={1}>\r\n                <Description>{description}</Description>\r\n            </Paper>\r\n        </Fade>\r\n    );\r\n};\r\n\r\nexport default memo(CryptoCurrencyDescription);\r\n","import Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\n\r\nimport { BaseCurrency } from \"types\";\r\nimport { BaseCurrencyForm, Legend } from \"../styles\";\r\n\r\ninterface BaseCurrencyChoiceType {\r\n    currencyBase: BaseCurrency | null;\r\n    setCurrencyBase: (arg0: BaseCurrency) => void;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n    const { currencyBase, setCurrencyBase } = props;\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrencyBase(event.target.value as BaseCurrency);\r\n    };\r\n\r\n    return (\r\n        <BaseCurrencyForm>\r\n            <Legend> Waluta odniesienia</Legend>\r\n            <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n                <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n                <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n                <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n            </RadioGroup>\r\n        </BaseCurrencyForm>\r\n    );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n","import * as React from \"react\";\r\nimport VirtualizedSelect from \"react-virtualized-select\";\r\n\r\nimport { CurrencyCrypto } from \"types\";\r\nimport { useDelayedCondition, useFetchListOfCryptos } from \"hooks\";\r\nimport Loader from \"components/Loader/Loader\";\r\n\r\nimport \"../styles/_CryptoCurrencySelectForm.scss\";\r\n\r\ninterface Props {\r\n    setCurrencyCrypto: (arg0: CurrencyCrypto) => void;\r\n    currencyCrypto: CurrencyCrypto | undefined;\r\n}\r\n\r\nfunction createLabelStyle(cryptos: Omit<CurrencyCrypto, \"imageURL\">[] | undefined) {\r\n    return cryptos && cryptos.length ? \"\" : \"inactivatedSelect\";\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<Props> = props => {\r\n    const { currencyCrypto, setCurrencyCrypto } = props;\r\n    const { isLoading, data: cryptos } = useFetchListOfCryptos();\r\n    const labelClass = React.useMemo(() => createLabelStyle(cryptos), [JSON.stringify(cryptos)]);\r\n    const shouldRenderLoader = useDelayedCondition(isLoading);\r\n\r\n    return (\r\n        <>\r\n            <label className={labelClass}>\r\n                <VirtualizedSelect\r\n                    value={currencyCrypto}\r\n                    className=\"virtualized-select\"\r\n                    placeholder=\"Wybierz kryptowalutę\"\r\n                    onChange={(selectValue: CurrencyCrypto) => {\r\n                        setCurrencyCrypto(selectValue);\r\n                    }}\r\n                    options={cryptos}\r\n                />\r\n            </label>\r\n            {shouldRenderLoader && <Loader />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import { memo } from \"react\";\r\n\r\nimport \"../styles/_logo.scss\";\r\n\r\nconst Logo = memo(() => (\r\n    <header className=\"logo\">\r\n        <h1>CryptoCurrency Tracker</h1>\r\n    </header>\r\n));\r\n\r\nexport default Logo;\r\n","import { lazy, useState, Suspense } from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\n\r\nimport { BlueButton } from \"components\";\r\nimport { BaseCurrency, CurrencyCrypto, UseConfirmChoice } from \"types\";\r\nimport { useCheckApiKey, useConfirmChoice, useDebouncedCallback } from \"hooks\";\r\nimport { CryptoCurrencySelectForm, BaseCurrencySelectForm, Logo } from \"./components\";\r\n\r\nconst Description = lazy(() => import(\"./components/CryptoCurrencyDescription\"));\r\n\r\nconst SelectionPage = () => {\r\n    const isApiKeyAvailable = useCheckApiKey();\r\n    const [currencyBase, setCurrencyBase] = useState<BaseCurrency | null>(null);\r\n    const [currencyCrypto, setCurrencyCrypto] = useState<CurrencyCrypto | undefined>(undefined);\r\n    const { confirmChoice, isEnabled } = useConfirmChoice({ currencyBase, currencyCrypto } as UseConfirmChoice);\r\n\r\n    const handleClick = useDebouncedCallback<HTMLButtonElement>(confirmChoice, undefined);\r\n\r\n    if (!isApiKeyAvailable) return null;\r\n    return (\r\n        <main>\r\n            <Stack spacing={2} sx={{ alignItems: \"center\" }}>\r\n                <Logo />\r\n                <BlueButton\r\n                    classes={isEnabled ? \"enabled\" : \"\"}\r\n                    isEnabled={isEnabled}\r\n                    clickHandler={handleClick}\r\n                    label=\"Pokaż kurs\"\r\n                />\r\n\r\n                <BaseCurrencySelectForm currencyBase={currencyBase} setCurrencyBase={setCurrencyBase} />\r\n                <CryptoCurrencySelectForm\r\n                    currencyCrypto={currencyCrypto}\r\n                    setCurrencyCrypto={setCurrencyCrypto}\r\n                    aria-label=\"Wybierz kryptowalutę\"\r\n                />\r\n                {currencyCrypto?.description && (\r\n                    <Suspense fallback={null}>\r\n                        <Description description={currencyCrypto.description} />\r\n                    </Suspense>\r\n                )}\r\n            </Stack>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default SelectionPage;\r\n","import Form from \"@mui/material/FormControl\";\n\nimport { styled } from \"@mui/system\";\n\nexport const BaseCurrencyForm = styled(Form)(({ theme }) => ({\n    borderRadius: \"2px\",\n    animation: \"fade_in 0.1s ease-in-out forwards\",\n    border: `2px solid`,\n    borderColor: theme.palette.secondary.main,\n    padding: theme.spacing(2.5),\n    width: \"300px\",\n    boxShadow: `inset 0 0 5px ${theme.palette.secondary.light}, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)`,\n    backgroundColor: theme.palette.secondary.light,\n    color: theme.palette.common.white,\n    tabIndex: \"0\",\n    \"&:hover\": { borderColor: theme.palette.primary.main },\n    \"& .MuiFormLabel-root\": { color: \"white\", fontFamily: '\"Lato\", sans-serif', paddingBottom: theme.spacing(0.6) },\n    \"& .MuiFormGroup-root\": { flexDirection: \"row\", justifyContent: \"space-around\" },\n}));\n\nexport default BaseCurrencyForm;\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\n\nexport const Description = styled(Box)(({ theme }) => ({\n    backgroundColor: theme.palette.primary.light,\n    width: \"300px\",\n    color: theme.palette.common.white,\n    borderRadius: 1,\n    padding: theme.spacing(2),\n    border: \"2px solid\",\n    borderColor: theme.palette.primary.dark,\n    boxShadow: `inset 0 0 5px ${theme.palette.primary.dark}, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)`,\n}));\nexport default Description;\n","import FormLabel from \"@mui/material/FormLabel\";\nimport { styled } from \"@mui/system\";\n\nexport const Legend = styled(FormLabel)(({ theme }) => ({\n    textAlign: \"center\",\n    color: theme.palette.common.white,\n    \"&:focus\": { color: theme.palette.common.white },\n    \"&.Mui-focused\": { color: theme.palette.common.white },\n}));\n\nexport default Legend;\n"],"names":["data","setData","useState","error","setError","loading","stopLoading","useBoolean","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","async","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","label","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","isAPIKeyAvailable","useRef","current","props","currencyBase","navigate","useNavigate","setCurrencyBase","setCurrencyCrypto","useContext","SelectedCurrenciesContext","isEnabled","pathToResults","undefined","confirmChoice","state","results","obj","Data","result","item","value","CoinName","image","ImageUrl","description","Description","isLoading","useQuery","BASE_URL","staleTime","cacheTime","select","createOptions","useEffect","initialValue","setValue","setFalse","toggle","fn","args","debounce","DELAY","DURATION","condition","delay","duration","delayedCondition","setDelayedCondition","delayTimeout","startTime","durationTimeout","Date","now","setTimeout","clearTimeout","CryptoCurrencyDescription","in","timeout","elevation","memo","RadioGroup","name","onChange","event","target","FormControlLabel","control","Radio","cryptos","useFetchListOfCryptos","labelClass","React","createLabelStyle","JSON","stringify","shouldRenderLoader","useDelayedCondition","className","placeholder","selectValue","options","Loader","lazy","isApiKeyAvailable","useCheckApiKey","useConfirmChoice","handleClick","useDebouncedCallback","Stack","spacing","sx","alignItems","classes","clickHandler","Suspense","fallback","styled","Form","theme","borderRadius","animation","border","borderColor","palette","secondary","main","padding","width","boxShadow","light","backgroundColor","color","common","white","tabIndex","primary","fontFamily","paddingBottom","flexDirection","justifyContent","Box","dark","FormLabel","textAlign"],"sourceRoot":""}