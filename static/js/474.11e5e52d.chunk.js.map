{"version":3,"file":"static/js/474.11e5e52d.chunk.js","mappings":"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","sources":["components/Spinner.tsx","pages/Results/scripts/isToday.ts","pages/Results/parts/returnToSelectionButton.tsx","functions/timestamps.ts","functions/createURL.ts","hooks/useFetchHistoricalValues.ts","functions/getPercentageChange.ts","functions/createComparativeArray.ts","functions/formatCurrentPrice.ts","pages/Results/parts/CryptoCurrencyContainer.tsx","pages/Results/parts/GeneralInfo.tsx","pages/Results/parts/CryptoCurencyPricesContainer.tsx","pages/Results/parts/PriceTableCell.tsx","pages/Results/parts/CryptoCurrencyCurrentPrice.tsx","pages/Results/parts/ComparativeTable.tsx","pages/Results/parts/MyTooltip.tsx","pages/Results/parts/InvestButton.tsx","pages/Results/parts/Logo.tsx","pages/Results/Results.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Container = withStyles({\r\n    root: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100vh',\r\n        alignItems: 'center',\r\n        background: 'transparent',\r\n        paddingTop: '10vh',\r\n    },\r\n})(Box);\r\n\r\nconst ContainerVerticallyCentered = withStyles({\r\n    root: {\r\n        justifyContent: 'center',\r\n    },\r\n})(Container);\r\n\r\nconst ColorCircularProgress = withStyles({\r\n    root: {\r\n        color: 'rgba(122, 194, 33, 0.8);',\r\n    },\r\n})(CircularProgress);\r\n/**\r\n * creates memoised spinner that indicates loading state\r\n * @returns spinner component\r\n */\r\nconst Loader = React.memo(() => {\r\n    return (\r\n        <ContainerVerticallyCentered>\r\n            <ColorCircularProgress thickness={5} size={100} />\r\n        </ContainerVerticallyCentered>\r\n    );\r\n});\r\n\r\nexport default Loader;\r\n","/**\r\n * Checks whether given moment is within today\r\n * @param someDate\r\n * @returns if it is today true, otherwise false\r\n */\r\n\r\nconst isToday = (someDate: Date): boolean => {\r\n    const today = new Date();\r\n    return (\r\n        someDate.getDate() === today.getDate() &&\r\n        someDate.getMonth() === today.getMonth() &&\r\n        someDate.getFullYear() === today.getFullYear()\r\n    );\r\n};\r\nexport default isToday;\r\n","import * as React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nconst ReturnToSelectionButton = (): JSX.Element => {\r\n    const history = useHistory();\r\n    return (\r\n        <button\r\n            className={'currencySettingButton enabled'}\r\n            onClick={() => {\r\n                history.push('/');\r\n            }}\r\n        >\r\n            Powr√≥t do wyboru\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default React.memo(ReturnToSelectionButton);\r\n","import subMonths from 'date-fns/subMonths';\r\nimport getUnixTime from 'date-fns/getUnixTime';\r\nimport endOfYesterday from 'date-fns/endOfYesterday';\r\nimport startOfYear from 'date-fns/startOfYear';\r\nimport { timestampsType, timestampIDs } from '../types';\r\n\r\nconst timestamps: timestampsType = {\r\n    content: [\r\n        ['1D', () => getUnixTime(endOfYesterday())],\r\n        ['1M', () => getUnixTime(subMonths(new Date(), 1))],\r\n        ['5M', () => getUnixTime(subMonths(new Date(), 3))],\r\n        ['12M', () => getUnixTime(subMonths(new Date(), 12))],\r\n        ['30M', () => getUnixTime(subMonths(new Date(), 30))],\r\n        ['YTD', () => getUnixTime(startOfYear(new Date()))],\r\n    ],\r\n    reducedLength: function () {\r\n        return this.content.length - 1;\r\n    },\r\n    getValue: function (i: number) {\r\n        return this.content[i][1]();\r\n    },\r\n    getTimestampID: function (i: number) {\r\n        return this.content[i][0];\r\n    },\r\n    getContent: function () {\r\n        return this.content;\r\n    },\r\n    getCodes: function (): timestampIDs[] {\r\n        const result: timestampIDs[] = [];\r\n        this.content.forEach(item => result.push(item[0]));\r\n        return result;\r\n    },\r\n};\r\n\r\nexport default timestamps;\r\n","import { timestampsType, optionType } from '../types';\r\nimport timestamps from './timestamps';\r\nclass CreateURL {\r\n    /**\r\n     * creates single URL for fetching historical prices\r\n     * @param coin\r\n     * @param reference\r\n     * @param timestamp\r\n     * @returns string being URL\r\n     */\r\n\r\n    private static timestamps = timestamps;\r\n\r\n    private static historicalURL(coin: string, reference: string, timestamp: timestampsType) {\r\n        return (\r\n            process.env.REACT_APP_HISTORICAL_URL +\r\n            coin +\r\n            '&tsym=' +\r\n            reference +\r\n            '&toTs=' +\r\n            timestamp +\r\n            '&avgType=MidHighLow&tryConversion=true&extraParams=your_app_name'\r\n        );\r\n    }\r\n    /**\r\n     * creates URL which enables fetching current cryptocurrency price\r\n     * @param crypto cryptocurrency\r\n     * @param base basecurrency\r\n     * @returns string being URL\r\n     */\r\n    static current(crypto: string, base: string) {\r\n        return process.env.REACT_APP_CURRENT_URL + crypto + '&tsyms=' + base;\r\n    }\r\n    /**\r\n     * creates array of URLs for fetching historical prices\r\n     * @param timestamps timestamps\r\n     * @param base base currency\r\n     * @param crypto cryptocurrency\r\n     * @returns string being URL\r\n     */\r\n    static historical(crypto: optionType, base: string) {\r\n        const linksArray = [];\r\n        for (let i = 0; i <= this.timestamps.reducedLength(); i++) {\r\n            linksArray.push(this.historicalURL(crypto.value, base, this.timestamps.getValue(i)));\r\n        }\r\n\r\n        return linksArray;\r\n    }\r\n}\r\n\r\nexport default CreateURL;\r\n","import { useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useSnackbar } from 'notistack';\r\nimport { baseCurrencyType, historicalPricesType } from '../types';\r\n\r\nconst useFetchHistoricalValues = () => {\r\n    const [data, setData] = useState<historicalPricesType | null>(null);\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    var historicalPrices: historicalPricesType = [];\r\n\r\n    const fatalError = useCallback(() => {\r\n        setError(true);\r\n        enqueueSnackbar(`No data fetched at all for endpoints`, {\r\n            variant: 'error',\r\n        });\r\n    }, []);\r\n\r\n    const theEndOfRecursiveFetchLoopHandle = () => {\r\n        setLoading(false);\r\n\r\n        if (historicalPrices.length) {\r\n            setData(historicalPrices);\r\n        } else {\r\n            fatalError();\r\n        }\r\n    };\r\n\r\n    const fetchData = async (endpoints: string[], baseCurrency: baseCurrencyType) => {\r\n        if (endpoints.length) {\r\n            let URL = endpoints.shift();\r\n            let reducedEndpoints = [...endpoints];\r\n\r\n            axios\r\n                .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n                .then(data => {\r\n                    const weatherData = { ...data };\r\n\r\n                    if (data.hasOwnProperty('data')) {\r\n                        if (weatherData.data.hasOwnProperty(baseCurrency)) {\r\n                            historicalPrices.push(weatherData.data[baseCurrency]);\r\n                        } else {\r\n                            historicalPrices.push('n/a');\r\n                        }\r\n\r\n                        if (reducedEndpoints.length) {\r\n                            fetchData(reducedEndpoints, baseCurrency);\r\n                        } else {\r\n                            theEndOfRecursiveFetchLoopHandle();\r\n                        }\r\n                    } else {\r\n                        setLoading(false);\r\n                        const label = URL ? URL : 'unknown location';\r\n                        enqueueSnackbar(`Data for ${label} was broken, corrupted or otherwise invalid`, {\r\n                            variant: 'warning',\r\n                        });\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    let code = err.response ? err.response.status : err;\r\n                    enqueueSnackbar(`Error ${code} encountered when fetching data for ${URL}`, {\r\n                        variant: 'warning',\r\n                    });\r\n                    if (reducedEndpoints.length) {\r\n                        fetchData(reducedEndpoints, baseCurrency);\r\n                    } else {\r\n                        theEndOfRecursiveFetchLoopHandle();\r\n                    }\r\n                });\r\n        } else {\r\n            setError(true);\r\n            enqueueSnackbar(`Empty array of URLs passed to useAxiosArray as argument`, {\r\n                variant: 'error',\r\n            });\r\n        }\r\n    };\r\n    const runFetchHistoricalValues = (endpoints: string[], baseCurrency: baseCurrencyType) =>\r\n        fetchData(endpoints, baseCurrency);\r\n\r\n    return { data, error, loading, runFetchHistoricalValues };\r\n};\r\n\r\nexport default useFetchHistoricalValues;\r\n","import { NotAvailable } from '../types';\r\n\r\n/**\r\n * calculate percentchange of two numbers (or strings, see return)\r\n * @param current\r\n * @param historical\r\n * @returns string being representation of changes with plus/minus and percents mark. In case of being called with string return is 'n/a'string\r\n */\r\nfunction getPercentChange(current: number, historical: number | NotAvailable): string | NotAvailable {\r\n    let outcome: string = '';\r\n    if (typeof historical === 'number') {\r\n        const historicalPrice = historical as number;\r\n        let change = (100 * (current - historicalPrice)) / historicalPrice;\r\n        const change_string = change.toLocaleString('pl-PL', {\r\n            useGrouping: true,\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2,\r\n        });\r\n\r\n        if (change === 0) outcome = 'no change';\r\n        else if (change > 0) outcome = `+${change_string}%`;\r\n        else if (change < 0) outcome = `${change_string}%`;\r\n    } else outcome = 'n/a';\r\n    return outcome;\r\n}\r\nexport default getPercentChange;\r\n","import getPercentChange from './getPercentageChange';\r\nimport { timestampIDs, comparativeArrayElement, comparativeArray, historicalPricesType } from '../types';\r\nimport timestamps from './timestamps';\r\n\r\n/**\r\n * combines current cryptocurrency price, historical cryptocurrency prices to get array with percentage changes in time\r\n * @param currentPrice\r\n * @param historicalPricesArray\r\n * @returns array\r\n */\r\nconst createComparativeArray = (\r\n    currentPrice: number,\r\n    historicalPricesArray: historicalPricesType,\r\n): comparativeArray => {\r\n    const result: comparativeArray = [];\r\n    const IDs: timestampIDs[] = timestamps.getCodes();\r\n\r\n    historicalPricesArray.forEach((item, index) => {\r\n        const obj = {} as comparativeArrayElement;\r\n        obj[IDs[index]] = getPercentChange(currentPrice, item); // tu mog≈Çby byƒá helper z fcp\r\n        result.push(obj);\r\n    });\r\n    return result;\r\n};\r\nexport default createComparativeArray;\r\n","import { baseCurrencyType } from '../types';\r\n\r\nfunction createObject(key: string, value: any): any {\r\n    const pair = {} as { [key: string]: any };\r\n    pair[key] = value;\r\n    return pair;\r\n}\r\n\r\n/**\r\n * creates  labelled currency base with currency code\r\n * @param currentPrice current price of cryptocurrency\r\n * @param currencyBase base currency code (the currency being price unit of cryptocurrencyPrice)\r\n * @returns object with key being given string and value being current price with currency symbol\r\n */\r\n\r\nconst formatCurrentPrice = (currentPrice: number, currencyBase: baseCurrencyType): string => {\r\n    const formattedCurrentPrice =\r\n        currentPrice.toString().length > 10 ? currentPrice.toExponential(2) : currentPrice.toString();\r\n    const withCoin = formattedCurrentPrice + ' ' + currencyBase;\r\n    return createObject('Aktualna cena', withCoin);\r\n};\r\n\r\nexport default formatCurrentPrice;\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst CryptoCurrencyContainer = withStyles({\r\n    root: {\r\n        width: '100%',\r\n        paddingRight: '15px',\r\n        paddingLeft: '15px',\r\n        marginRight: 'auto',\r\n        marginLeft: 'auto',\r\n        marginTop: '30vh',\r\n    },\r\n})(Box);\r\n\r\nexport default CryptoCurrencyContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport parasol from '../../../graphics/parasol.png';\r\n\r\nconst GeneralInfoTitle = styled.div`\r\n  \r\n  font-size: 1.25rem;\r\n  white-space: pre-wrap;\r\n  text-align: center;\r\n  color: rgb(216,53,80);\r\n  // @media (max-width: 767px) {\r\n  //     display: block;\r\n  //     position: absolute;\r\n  //     top: -10px;\r\n  // }\r\n  // @media (min-width: 768px) and (max-width:1200px) {\r\n  //     line-height: 1;\r\n  // }\r\n}\r\n`;\r\nconst GeneralInfoWrapper = styled.div`\r\n    position: relative;\r\n    height: 75px;\r\n    width: 20%;\r\n    padding-left: 23px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    justify-content: center;\r\n    @media (max-width: 1000px) {\r\n        width: 100%;\r\n        display: flex;\r\n        padding: 7px 0 12px 0;\r\n        height: unset;\r\n        flex-direction: row;\r\n        justify-content: space-evenly;\r\n        align-items: center;\r\n    }\r\n    @media (max-width: 400px) {\r\n        width: 100%;\r\n        display: flex;\r\n        padding: 7px 0 12px 0;\r\n        height: unset;\r\n        flex-direction: column;\r\n        justify-content: space-evenly;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nconst altcoins_growth = 'Altcoins - hightest growth';\r\n\r\nconst GeneralInfoAlt = styled.div`\r\n    font-size: 10px;\r\n    display: block;\r\n\r\n    &::before {\r\n        content: '';\r\n        display: block;\r\n        width: 7px;\r\n        height: 7px;\r\n        border-radius: 100%;\r\n        margin: 4px 5px 0 0;\r\n        float: left;\r\n        background-color: #ffbe33;\r\n    }\r\n`;\r\n\r\nconst GeneralInfoFnd = styled.div`\r\n    font-size: 10px;\r\n    display: block;\r\n    &::before {\r\n        content: '';\r\n        display: block;\r\n        width: 10px;\r\n        height: 10px;\r\n        margin: 0 5px 0 -3px;\r\n        float: left;\r\n        background: url(${parasol});\r\n    }\r\n`;\r\n\r\ninterface PropsType {\r\n    name: string;\r\n}\r\n/**\r\n * Renders general information about cryptocurrency\r\n * @param {string} name cryptocurrency nam\r\n * @returns memoised component\r\n */\r\nconst GeneralInfo = React.memo((props: PropsType) => {\r\n    const { name } = props;\r\n    return (\r\n        <GeneralInfoWrapper>\r\n            <GeneralInfoTitle>{name}</GeneralInfoTitle>\r\n            <GeneralInfoFnd>{`${name} foundation`}</GeneralInfoFnd>\r\n            <GeneralInfoAlt>{altcoins_growth}</GeneralInfoAlt>\r\n        </GeneralInfoWrapper>\r\n    );\r\n});\r\n\r\nexport default GeneralInfo;\r\n","import styled from 'styled-components';\r\n\r\nconst CryptoCurrencyPricesContainer = styled.div`\r\n    display: grid;\r\n    width: 100%;\r\n    grid-template-columns: 1.5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n    @media (max-width: 850px) {\r\n        grid-template-columns: repeat(4, 1fr);\r\n        & :nth-child(5) {\r\n            border-left: none;\r\n        }\r\n    }\r\n    @media (max-width: 600px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n        & :nth-child(odd) {\r\n            border-left: none;\r\n        }\r\n    }\r\n\r\n    & :first-child {\r\n        @media (max-width: 1000px) {\r\n            border-left: none;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 300px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n        & * {\r\n            border-left: none;\r\n        }\r\n    }\r\n`;\r\nexport default CryptoCurrencyPricesContainer;\r\n","import styled from 'styled-components';\r\n\r\nexport const PriceTableCell = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n    height: 75px;\r\n    padding: 0 4px;\r\n    border-left: 2px solid #9db9f5;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { PriceTableCell } from './PriceTableCell';\r\nimport * as React from 'react';\r\nimport { GenericStringObject } from '../../../types';\r\n\r\nconst CurrentPriceValue = styled.div`\r\n    font-size: 1.25rem;\r\n    color: rgb(216, 53, 80);\r\n    @media (max-width: 400px) {\r\n        font-size: 1rem;\r\n    }\r\n`;\r\nconst CurrentPriceName = styled.div`\r\n    font-size: 10px;\r\n`;\r\n/**\r\n * Displays cell with current cryptocurrency price\r\n * @param props object with current cryptocurrency price data\r\n * @returns component\r\n */\r\nconst CryptoCurrencyCurrentPrice = (props: GenericStringObject) => {\r\n    const { currentPrice } = props;\r\n    return currentPrice ? (\r\n        <PriceTableCell>\r\n            <CurrentPriceValue>{Object.values(currentPrice)[0]}</CurrentPriceValue>\r\n            <CurrentPriceName>{Object.keys(currentPrice)[0]}</CurrentPriceName>\r\n        </PriceTableCell>\r\n    ) : null;\r\n};\r\n\r\nexport default CryptoCurrencyCurrentPrice;\r\n","import { PriceTableCell } from './PriceTableCell';\r\nimport * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { comparativeArray } from '../../../types';\r\n\r\nconst HistoricalValue = styled.div`\r\n    font-size: 20px;\r\n    padding: 0 3px;\r\n`;\r\nconst HistoricalName = styled.div`\r\n    font-size: 10px;\r\n`;\r\n\r\ninterface ComparativeTablePropsType {\r\n    historicals: comparativeArray;\r\n}\r\n/**\r\n * Creates table with historical price and percentage change\r\n * @param historicals data to be displayed\r\n * @returns component with tabelarised data\r\n */\r\n\r\nconst ComparativeTable = (props: ComparativeTablePropsType): JSX.Element => {\r\n    const { historicals } = props;\r\n\r\n    return (\r\n        <>\r\n            {historicals.map((element, index) => (\r\n                <PriceTableCell key={index}>\r\n                    <HistoricalValue key={index}>{Object.values(element)[0]}</HistoricalValue>\r\n                    <HistoricalName key={index + 'x'}>{Object.keys(element)[0]}</HistoricalName>\r\n                </PriceTableCell>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ComparativeTable;\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n/**\r\n * Tooltip component\r\n */\r\nconst MyTooltip = withStyles(() => ({\r\n    tooltip: {\r\n        backgroundColor: '#F5C200',\r\n        border: '1px solid #EE760A',\r\n        boxShadow: 'inset 0 0 5px #EE760A',\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        fontSize: 11,\r\n    },\r\n}))(Tooltip);\r\n\r\nexport default MyTooltip;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { PriceTableCell } from './PriceTableCell';\r\nimport styled from 'styled-components';\r\nimport oko from '../../../graphics/oko.png';\r\nimport waga from '../../../graphics/waga.png';\r\nimport waga_hover from '../../../graphics/wagahover.png';\r\nimport oko_hover from '../../../graphics/okohover.png';\r\nimport MyTooltip from './MyTooltip';\r\n\r\nconst InvestWrapper = styled.div`\r\n    width: 109px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n    height: 75px;\r\n    &::before {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        width: 26px;\r\n        height: 20px;\r\n        bottom: 0px;\r\n        left: 25px;\r\n        background: url(${oko});\r\n    }\r\n    &::after {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        width: 25px;\r\n        height: 20px;\r\n        bottom: 0px;\r\n        right: 25px;\r\n        background: url(${waga});\r\n    }\r\n    &:hover::after {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        width: 25px;\r\n        height: 20px;\r\n        bottom: 0px;\r\n        right: 25px;\r\n        background: url(${waga_hover});\r\n    }\r\n    &:hover::before {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        width: 25px;\r\n        height: 20px;\r\n        bottom: 0px;\r\n        right: 25px;\r\n        background: url(${oko_hover});\r\n    }\r\n`;\r\n/**\r\n * creates button which could be in the future used for investing\r\n * @returns button component\r\n */\r\nconst InvestButton = () => {\r\n    return (\r\n        <PriceTableCell>\r\n            <InvestWrapper>\r\n                <MyTooltip title=\"Ta funkcjonalno≈õƒá nie jest jeszcze zaimplementowana\" placement=\"top-start\">\r\n                    <Button variant=\"contained\" color=\"secondary\" size=\"small\">\r\n                        Inwestuj\r\n                    </Button>\r\n                </MyTooltip>\r\n            </InvestWrapper>\r\n        </PriceTableCell>\r\n    );\r\n};\r\n\r\nexport default InvestButton;\r\n","import * as React from 'react';\r\n\r\ninterface LogoPropsType {\r\n    URL: string;\r\n}\r\n/**\r\n * creates Logo of cryptocurrency. Firstly createscomplete URL\r\n * @param URL string being critical part of URL\r\n * @returns logo component\r\n */\r\nconst Logo = (props: LogoPropsType) => {\r\n    const { URL } = props;\r\n    const cryptoLogoUrl = URL ? process.env.REACT_APP_CRYPTOS_GENERAL + URL + '?width=30' : '';\r\n    return cryptoLogoUrl ? (\r\n        <img className=\"logo\" src={cryptoLogoUrl} alt={''} aria-label={'cryptocurrency logo image'} />\r\n    ) : null;\r\n};\r\n\r\nexport default Logo;\r\n","import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport isToday from './scripts/isToday';\r\nimport { SelectedCurrenciesContext } from '../../context/currenciesContext';\r\nimport { useQuery } from 'react-query';\r\nimport { useSnackbar } from 'notistack';\r\nimport ReturnToSelectionButton from './parts/returnToSelectionButton';\r\nimport CreateURL from '../../functions/createURL';\r\nimport useFetchHistoricalValues from '../../hooks/useFetchHistoricalValues';\r\nimport createComparativeArray from '../../functions/createComparativeArray';\r\nimport formatCurrentPrice from '../../functions/formatCurrentPrice';\r\nimport CryptoCurrencyContainer from './parts/CryptoCurrencyContainer';\r\nimport GeneralInfo from './parts/GeneralInfo';\r\nimport CryptoCurrencyPricesContainer from './parts/CryptoCurencyPricesContainer';\r\nimport CryptoCurrencyCurrentPrice from './parts/CryptoCurrencyCurrentPrice';\r\nimport ComparativeTable from './parts/ComparativeTable';\r\nimport InvestButton from './parts/InvestButton';\r\nimport { Grow } from '@material-ui/core';\r\nimport { comparativeArray, historicalPricesType } from '../../types';\r\nimport { initial } from '../../config';\r\nimport Logo from './parts/Logo';\r\nimport Loader from '../../components/Spinner';\r\ninterface ResultsType {\r\n    comparativePricesArray: comparativeArray;\r\n    currentPrice: string;\r\n}\r\n\r\ninterface refType {\r\n    date: Date;\r\n    currentCryptoPrice: number | undefined;\r\n}\r\n\r\n/**\r\n * Presents cryptocurrency price current and historical\r\n * @returns component\r\n */\r\nconst Results = (): JSX.Element => {\r\n    const ref = React.useRef<refType>({\r\n        date: new Date(),\r\n        currentCryptoPrice: undefined,\r\n    });\r\n\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const { currencyBase, currencyCrypto } = React.useContext(SelectedCurrenciesContext);\r\n    const intervalMs = initial.intervalMs;\r\n    const currentURL = CreateURL.current(currencyCrypto.value, currencyBase);\r\n    const [results, setResults] = React.useState<ResultsType | null>(null);\r\n    const [historicalCryptoPrice, sethistoricalCryptoPrice] = React.useState<\r\n        historicalPricesType | undefined | null\r\n    >(undefined);\r\n\r\n    const { data: currentCryptoData, error: currentCryptoError } = useQuery(\r\n        'currentCrypto',\r\n        async () => {\r\n            if (!isToday(ref.current.date)) {\r\n                const historicalsURLsArray = CreateURL.historical(currencyCrypto, currencyBase);\r\n                runFetchHistoricalValues(historicalsURLsArray, currencyBase);\r\n            }\r\n            const res = await axios.get(currentURL, { Apikey: process.env.REACT_APP_API_KEY });\r\n            return res.data;\r\n        },\r\n        {\r\n            refetchInterval: intervalMs,\r\n        },\r\n    );\r\n\r\n    const { data: historicalData, runFetchHistoricalValues } = useFetchHistoricalValues();\r\n\r\n    useEffect(() => {\r\n        const historicalsURLsArray = CreateURL.historical(currencyCrypto, currencyBase);\r\n        runFetchHistoricalValues(historicalsURLsArray, currencyBase);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (currentCryptoData && historicalCryptoPrice) {\r\n            let cryptoPrice = Object.values(currentCryptoData)[0] as number;\r\n            if (cryptoPrice !== ref.current.currentCryptoPrice) {\r\n                ref.current.currentCryptoPrice = cryptoPrice;\r\n                enqueueSnackbar(`Zmiana`, {\r\n                    variant: 'success',\r\n                });\r\n\r\n                const comparativeArray = createComparativeArray(cryptoPrice, historicalCryptoPrice);\r\n                const formattedCryptoPrice = formatCurrentPrice(cryptoPrice, currencyBase);\r\n                const result: ResultsType = {\r\n                    comparativePricesArray: comparativeArray,\r\n                    currentPrice: formattedCryptoPrice,\r\n                };\r\n\r\n                setResults(result);\r\n            }\r\n        }\r\n    }, [currentCryptoData, historicalCryptoPrice]);\r\n\r\n    React.useEffect(() => {\r\n        if (historicalData && historicalCryptoPrice !== historicalData) {\r\n            sethistoricalCryptoPrice(historicalData);\r\n        }\r\n    }, [historicalData]);\r\n\r\n    currentCryptoError &&\r\n        enqueueSnackbar(`Podczas pobierania danych bie≈ºƒÖcych dla ${currencyCrypto.label} wystƒÖpi≈Ç b≈ÇƒÖd `, {\r\n            variant: 'error',\r\n        });\r\n    if (!results) return <Loader />;\r\n    return (\r\n        <>\r\n            <ReturnToSelectionButton />\r\n            {(results as ResultsType) && (\r\n                <CryptoCurrencyContainer>\r\n                    <Grow in={true} timeout={1000}>\r\n                        <div className=\"DataContainer\">\r\n                            <GeneralInfo name={currencyCrypto.label} />\r\n                            {currencyCrypto.image && <Logo URL={currencyCrypto.image} />}\r\n                            <CryptoCurrencyPricesContainer>\r\n                                <CryptoCurrencyCurrentPrice currentPrice={results!.currentPrice} />\r\n                                <ComparativeTable historicals={results!.comparativePricesArray} />\r\n                                <InvestButton />\r\n                            </CryptoCurrencyPricesContainer>\r\n                        </div>\r\n                    </Grow>\r\n                </CryptoCurrencyContainer>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Results;\r\n"],"names":["Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","ColorCircularProgress","color","CircularProgress","Loader","React","thickness","size","someDate","today","Date","getDate","getMonth","getFullYear","ReturnToSelectionButton","history","useHistory","className","onClick","push","content","getUnixTime","endOfYesterday","subMonths","startOfYear","reducedLength","this","length","getValue","i","getTimestampID","getContent","getCodes","result","forEach","item","CreateURL","coin","reference","timestamp","process","crypto","base","linksArray","timestamps","historicalURL","value","useState","data","setData","error","setError","loading","setLoading","enqueueSnackbar","useSnackbar","historicalPrices","fatalError","useCallback","variant","theEndOfRecursiveFetchLoopHandle","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","then","weatherData","hasOwnProperty","catch","err","code","response","status","runFetchHistoricalValues","current","historical","outcome","change","change_string","toLocaleString","useGrouping","minimumFractionDigits","maximumFractionDigits","currentPrice","historicalPricesArray","IDs","index","obj","getPercentChange","currencyBase","key","pair","createObject","toString","toExponential","width","paddingRight","paddingLeft","marginRight","marginLeft","marginTop","GeneralInfoTitle","styled","GeneralInfoWrapper","GeneralInfoAlt","GeneralInfoFnd","parasol","props","name","PriceTableCell","CurrentPriceValue","CurrentPriceName","Object","values","keys","HistoricalValue","HistoricalName","historicals","map","element","tooltip","backgroundColor","border","boxShadow","fontSize","Tooltip","InvestWrapper","oko","waga","waga_hover","oko_hover","title","placement","Button","cryptoLogoUrl","src","alt","ref","date","currentCryptoPrice","undefined","SelectedCurrenciesContext","currencyCrypto","intervalMs","initial","currentURL","results","setResults","historicalCryptoPrice","sethistoricalCryptoPrice","useQuery","isToday","historicalsURLsArray","res","refetchInterval","currentCryptoData","currentCryptoError","useFetchHistoricalValues","historicalData","useEffect","cryptoPrice","comparativeArray","createComparativeArray","formattedCryptoPrice","formatCurrentPrice","comparativePricesArray","label","Grow","in","timeout","image"],"sourceRoot":""}