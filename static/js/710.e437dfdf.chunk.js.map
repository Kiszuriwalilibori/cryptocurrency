{"version":3,"file":"static/js/710.e437dfdf.chunk.js","mappings":"+KA0BA,UAX6B,SAACA,GAC5B,IAAQC,EAA0BD,EAA1BC,OAAQC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,OACjBC,GAAcC,EAAAA,EAAAA,MAIpB,OAFAH,GAASE,EAAYF,MAAM,qDAAD,OAA4CC,EAAM,wCAEvEF,EAEE,MAFa,SAAC,KAAM,GAG7B,C,6GCDA,EAXqB,SAACD,GAClB,IAAQM,EAAiBN,EAAjBM,aAER,OACI,iBAAKC,UAAU,OAAM,WACjB,SAACC,EAAA,EAAU,CAACC,QAAQ,aAAY,SAAEC,OAAOC,OAAOL,GAAc,MAC9D,SAACE,EAAA,EAAU,CAACC,QAAQ,WAAU,SAAEC,OAAOE,KAAKN,GAAc,OAGtE,E,UCCA,GAXoBO,EAAAA,EAAAA,OAAK,SAACb,GACtB,IAAQc,EAASd,EAATc,KACR,OACI,iBAAKP,UAAU,qBAAoB,WAC/B,gBAAKA,UAAU,QAAO,SAAEO,KACxB,gBAAKP,UAAU,aAAY,mBAAKO,EAAI,kBACpC,gBAAKP,UAAU,WAAU,SAAC,iCAGtC,I,oBCpBaQ,EAAa,UAabC,EAAe,CACxBC,gBAAiB,UACjBC,OAAO,aAAD,OAAeH,GACrBI,UAAU,iBAAD,OAAmBJ,GAC5BK,MAAO,sBACPC,SAAU,ICPRC,EAAe,WACjB,OACI,gBAAKf,UAAU,OAAM,UACjB,gBAAKA,UAAU,gBAAe,UAC1B,SAACgB,EAAA,EAAO,CACJC,gBAAiB,CAAEC,QAAS,CAAEC,GAAIV,IAClCW,MAAM,gEACNC,UAAU,YAAW,UAErB,SAACC,EAAA,EAAM,CAACpB,QAAQ,YAAYW,MAAM,QAAQU,KAAK,QAAO,SAAC,kBAO3E,EAEA,GAAejB,EAAAA,EAAAA,MAAKS,G,UCXpB,EARa,SAACtB,GACZ,IAAQ+B,EAAQ/B,EAAR+B,IAEDC,EAAgBC,EAAAA,GAAAA,IAAY,WAAaF,EAAM,YAEtD,OAAO,gBAAKxB,UAAU,OAAO2B,IAAKF,EAAeG,IAAK,GAAI,aAAY,6BACxE,E,mBCkBA,EApBgB,SAACnC,GACb,IAAQoC,EAAiBpC,EAAjBoC,aAER,OACI,8BACKA,EAAaC,KAAI,SAAAC,GAAM,OACpB,iBAAK/B,UAAU,OAAM,WACjB,SAACC,EAAA,EAAU,CAACC,QAAQ,aAAY,SAC3BC,OAAOC,OAAO2B,GAAQ,IADWC,QAItC,SAAC/B,EAAA,EAAU,CAACC,QAAQ,WAAU,SACzBC,OAAOE,KAAK0B,GAAQ,IADWC,SALbA,MAQrB,KAItB,E,UCKA,EApBqB,SAACvC,GAClB,IAAQwC,EAA4BxC,EAA5BwC,eAAgBC,EAAYzC,EAAZyC,QAExB,OACI,SAAC,KAAe,WACZ,SAACC,EAAA,EAAI,CAACC,IAAI,EAAMC,QAAS,IAAK,UAC1B,iBAAKrC,UAAU,gBAAe,WAC1B,SAACsC,EAAkB,CAAC/B,KAAM0B,EAAeM,QACxCN,EAAeO,QAAS,SAAC,EAAI,CAAChB,IAAKS,EAAeO,SACnD,iBAAKxC,UAAU,oBAAmB,UAC7BkC,EAASnC,eAAgB,SAAC0C,EAA0B,CAAC1C,aAAcmC,EAASnC,eAC5EmC,EAASQ,UAAW,SAAC,EAAO,CAACb,aAAcK,EAASQ,WACrD,SAAC,EAAY,aAMrC,C","sources":["pages/ResultsPage/parts/FetchStatusIndicator.tsx","pages/ResultsPage/parts/CryptoCurrencyCurrentPrice.tsx","pages/ResultsPage/parts/GeneralInformation.tsx","styles/sxStyles.ts","pages/ResultsPage/parts/InvestButton.tsx","pages/ResultsPage/parts/Logo.tsx","pages/ResultsPage/parts/Changes.tsx","pages/ResultsPage/parts/ResultsTable.tsx"],"sourcesContent":["import { useMessage } from \"hooks\";\r\nimport { Loader } from \"components\";\r\n\r\ninterface Props {\r\n  result: boolean;\r\n  error: unknown;\r\n  crypto: string;\r\n}\r\n/**\r\n * creates indicators for loading and error\r\n * @param result  result of fetch operation\r\n * @param error possible error in fetch operation\r\n * @param crypto name of current cryptocurrency\r\n * @returns component\r\n */\r\nconst FetchStatusIndicator = (props: Props) => {\r\n  const { result, error, crypto } = props;\r\n  const showMessage = useMessage();\r\n\r\n  error && showMessage.error(`Podczas pobierania danych bieżących dla ${crypto} wystąpił błąd `);\r\n\r\n  if (!result) return <Loader />;\r\n\r\n  return null;\r\n};\r\n\r\nexport default FetchStatusIndicator;\r\n","import { Typography } from \"@mui/material\";\r\nimport \"../styles/_CurrentPrice.scss\";\r\n\r\n/**\r\n * Displays cell with current cryptocurrency price\r\n * @param props object with current cryptocurrency price data\r\n * @returns component\r\n */\r\ninterface Props {\r\n    currentPrice: { [key: string]: string };\r\n}\r\n\r\nconst CurrentPrice = (props: Props) => {\r\n    const { currentPrice } = props;\r\n\r\n    return (\r\n        <div className=\"cell\">\r\n            <Typography variant=\"purpleText\">{Object.values(currentPrice)[0]}</Typography>\r\n            <Typography variant=\"greyText\">{Object.keys(currentPrice)[0]}</Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentPrice;\r\n","import { memo } from \"react\";\r\nimport \"../styles/_generalInformation.scss\";\r\n\r\ninterface Props {\r\n    name: string;\r\n}\r\n/**\r\n * Renders general information about cryptocurrency\r\n * @param {string} name cryptocurrency nam\r\n * @returns memoised component\r\n */\r\nconst GeneralInfo = memo((props: Props) => {\r\n    const { name } = props;\r\n    return (\r\n        <div className=\"GeneralInformation\">\r\n            <div className=\"title\">{name}</div>\r\n            <div className=\"foundation\">{`${name} foundation`}</div>\r\n            <div className=\"altcoins\">Altcoins - hightest growth</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GeneralInfo;\r\n","export const localBrown = \"#EE760A\";\r\n\r\nexport const loaderContainerStyle = {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n    justifyContent: \"center\",\r\n};\r\n\r\nexport const tooltipStyle = {\r\n    backgroundColor: \"#F5C200\",\r\n    border: `1px solid ${localBrown}`,\r\n    boxShadow: `inset 0 0 5px ${localBrown}`,\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    fontSize: 11,\r\n};\r\n","import { memo } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport { tooltipStyle } from \"styles/sxStyles\";\r\n\r\nimport \"../styles/_InvestButton.scss\";\r\n\r\n/**\r\n * creates button which could be in the future used for investing\r\n * @returns button component\r\n */\r\nconst InvestButton = () => {\r\n    return (\r\n        <div className=\"cell\">\r\n            <div className=\"InvestWrapper\">\r\n                <Tooltip\r\n                    componentsProps={{ tooltip: { sx: tooltipStyle } }}\r\n                    title=\"Ta funkcjonalność nie jest jeszcze zaimplementowana\"\r\n                    placement=\"top-start\"\r\n                >\r\n                    <Button variant=\"contained\" color=\"error\" size=\"small\">\r\n                        Inwestuj\r\n                    </Button>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(InvestButton);\r\n","import { baseURL } from \"config\";\r\n\r\ninterface Props {\r\n  URL: string;\r\n}\r\n/**\r\n * creates Logo of cryptocurrency. Firstly createscomplete URL\r\n * @param URL string being critical part of URL\r\n * @returns logo component\r\n */\r\nconst Logo = (props: Props) => {\r\n  const { URL } = props;\r\n  \r\n   const cryptoLogoUrl = baseURL.get(\"general\") + URL + \"?width=30\";\r\n\r\n  return <img className=\"logo\" src={cryptoLogoUrl} alt={\"\"} aria-label={\"cryptocurrency logo image\"} />;\r\n};\r\n\r\nexport default Logo;\r\n","import { Typography } from \"@mui/material\";\r\nimport uuid from \"react-uuid\";\r\n\r\nimport { ChangesArray } from \"types\";\r\n\r\ninterface Props {\r\n    changesArray: ChangesArray;\r\n}\r\n/**\r\n * Creates table with historical price and percentage change\r\n * @param changesArray data to be displayed\r\n * @returns component with tabelarised data\r\n */\r\n\r\nconst Changes = (props: Props): JSX.Element => {\r\n    const { changesArray } = props;\r\n\r\n    return (\r\n        <>\r\n            {changesArray.map(change => (\r\n                <div className=\"cell\" key={uuid()}>\r\n                    <Typography variant=\"purpleText\" key={uuid()}>\r\n                        {Object.values(change)[0]}\r\n                    </Typography>\r\n\r\n                    <Typography variant=\"greyText\" key={uuid()}>\r\n                        {Object.keys(change)[0]}\r\n                    </Typography>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Changes;\r\n","import { Grow } from \"@mui/material\";\r\n\r\nimport { Changes, CryptoCurrencyCurrentPrice, GeneralInformation, InvestButton, Logo } from \"../parts\";\r\nimport { CryptoContainer } from \"styles/styled\";\r\nimport { CurrencyCrypto, ResultsType } from \"types\";\r\n\r\nimport \"../styles/_ResultsTable.scss\";\r\n\r\ninterface Props {\r\n    currencyCrypto: CurrencyCrypto;\r\n    results: ResultsType;\r\n}\r\n/**\r\n * creates array with all provided informations about crypto\r\n * @param props\r\n * @returns\r\n */\r\nconst ResultsTable = (props: Props) => {\r\n    const { currencyCrypto, results } = props;\r\n\r\n    return (\r\n        <CryptoContainer>\r\n            <Grow in={true} timeout={1000}>\r\n                <div className=\"DataContainer\">\r\n                    <GeneralInformation name={currencyCrypto.label} />\r\n                    {currencyCrypto.image && <Logo URL={currencyCrypto.image} />}\r\n                    <div className=\"PricesWithButtons\">\r\n                        {results!.currentPrice && <CryptoCurrencyCurrentPrice currentPrice={results!.currentPrice} />}\r\n                        {results!.changes && <Changes changesArray={results!.changes} />}\r\n                        <InvestButton />\r\n                    </div>\r\n                </div>\r\n            </Grow>\r\n        </CryptoContainer>\r\n    );\r\n};\r\n\r\nexport default ResultsTable;\r\n"],"names":["props","result","error","crypto","showMessage","useMessage","currentPrice","className","Typography","variant","Object","values","keys","memo","name","localBrown","tooltipStyle","backgroundColor","border","boxShadow","color","fontSize","InvestButton","Tooltip","componentsProps","tooltip","sx","title","placement","Button","size","URL","cryptoLogoUrl","baseURL","src","alt","changesArray","map","change","uuid","currencyCrypto","results","Grow","in","timeout","GeneralInformation","label","image","CryptoCurrencyCurrentPrice","changes"],"sourceRoot":""}