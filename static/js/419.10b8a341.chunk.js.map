{"version":3,"file":"static/js/419.10b8a341.chunk.js","mappings":"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","sources":["components/Loader.tsx","components/BlueButton.tsx","hooks/useFetchHistoricalValues.ts","resources/errorDictionary.ts","hooks/useTypedSelector.ts","pages/ResultsPage/parts/FetchStatusIndicator.tsx","pages/ResultsPage/ResultsPage.tsx","pages/ResultsPage/parts/CryptoCurencyPricesContainer.tsx","pages/ResultsPage/parts/CryptoCurrencyContainer.tsx","pages/ResultsPage/parts/CryptoCurrencyCurrentPrice.tsx","pages/ResultsPage/parts/GeneralInfo.tsx","pages/ResultsPage/parts/Tooltip.tsx","pages/ResultsPage/parts/InvestButton.tsx","pages/ResultsPage/parts/Logo.tsx","pages/ResultsPage/parts/PriceTableCell.tsx","pages/ResultsPage/parts/ResultsTable.tsx","pages/ResultsPage/parts/TableOfChanges.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Progress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst Container = withStyles({\r\n  root: {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n  },\r\n})(Box);\r\n\r\nconst ContainerVerticallyCentered = withStyles({\r\n  root: {\r\n    justifyContent: \"center\",\r\n  },\r\n})(Container);\r\n\r\nexport const CircularProgress = withStyles({\r\n  root: {\r\n    color: \"rgba(122, 194, 33, 0.8);\",\r\n  },\r\n})(Progress);\r\n/**\r\n * creates memoised spinner that indicates loading state\r\n * @returns spinner component\r\n */\r\nconst Loader = React.memo(() => {\r\n  return (\r\n    <ContainerVerticallyCentered>\r\n      <CircularProgress thickness={5} size={100} />\r\n    </ContainerVerticallyCentered>\r\n  );\r\n});\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport \"./_button.scss\";\r\n\r\ninterface Props {\r\n  classes?: string;\r\n  isEnabled?: boolean;\r\n  clickHandler?: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n  label?: string;\r\n}\r\n\r\nconst BlueButton = (props: Props) => {\r\n  const { classes = \"enabled\", isEnabled = true, clickHandler = () => {}, label = \"\" } = props;\r\n  const baseClassName = \"BlueButton\";\r\n\r\n  return (\r\n    <button className={`${baseClassName} ${classes}`} onClick={clickHandler} disabled={!isEnabled}>\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BlueButton;\r\n","import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\n\r\nconst useFetchHistoricalValues = () => {\r\n  const [data, setData] = useState<HistoricalPrices | null>(null);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  let historicalPrices: HistoricalPrices = [];\r\n\r\n  const fatalError = useCallback(() => {\r\n    setError(true);\r\n    enqueueSnackbar(`No data fetched at all for given endpoints`, {\r\n      variant: \"error\",\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const theEndOfRecursiveFetchLoopHandle = () => {\r\n    setLoading(false);\r\n\r\n    if (historicalPrices.length) {\r\n      setData(historicalPrices);\r\n    } else {\r\n      fatalError();\r\n    }\r\n  };\r\n\r\n  const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n    if (endpoints.length) {\r\n      let URL = endpoints.shift();\r\n      let reducedEndpoints = [...endpoints]; /// co ta linika robi, tylko kopiÄ™ tworzy?\r\n\r\n      axios\r\n        .get(URL as string, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n        .then(data => {\r\n          const weatherData = { ...data };\r\n\r\n          if (data.hasOwnProperty(\"data\")) {\r\n            if (weatherData.data.hasOwnProperty(baseCurrency)) {\r\n              historicalPrices.push(weatherData.data[baseCurrency]);\r\n            } else {\r\n              historicalPrices.push(NotAvailable.na);\r\n            }\r\n\r\n            if (reducedEndpoints.length) {\r\n              fetchData(reducedEndpoints, baseCurrency);\r\n            } else {\r\n              theEndOfRecursiveFetchLoopHandle();\r\n            }\r\n          } else {\r\n            setLoading(false);\r\n            const label = URL ? URL : \"unknown location\";\r\n            enqueueSnackbar(`Data for ${label} was broken, corrupted or otherwise invalid`, {\r\n              variant: \"warning\",\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          let code = err.response ? err.response.status : err;\r\n          enqueueSnackbar(`Error ${code} encountered when fetching data for ${URL}`, {\r\n            variant: \"warning\",\r\n          });\r\n          if (reducedEndpoints.length) {\r\n            fetchData(reducedEndpoints, baseCurrency);\r\n          } else {\r\n            theEndOfRecursiveFetchLoopHandle();\r\n          }\r\n        });\r\n    } else {\r\n      setError(true);\r\n      enqueueSnackbar(`Empty array of URLs passed to useAxiosArray as argument`, {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n  const fetchHistoricalValues = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n    fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n  };\r\n\r\n  return { data, error, loading, fetchHistoricalValues };\r\n};\r\n\r\nexport default useFetchHistoricalValues;\r\n\r\n//const historicalsURLsArray = CreateURL.historical(currencyCrypto, currencyBase);\r\n","/**\r\n * Not in use. perhaps in the future\r\n */\r\n\r\nlet errorDictionary: { [key: string]: string } = {\r\n  404: \"Not found\",\r\n};\r\n\r\nerrorDictionary = new Proxy(errorDictionary, {\r\n  get(target, phrase: string) {\r\n    if (phrase in target) {\r\n      return target[phrase];\r\n    } else {\r\n      return phrase;\r\n    }\r\n  },\r\n});\r\n\r\nexport default errorDictionary;\r\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootStateType } from '../components/AppProvider';\r\n/**\r\n * prepares useSelectorHook which knows RootStateType\r\n */\r\nexport const useTypedSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import * as React from \"react\";\r\n\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { Loader } from \"components\";\r\n\r\ninterface Props {\r\n  result: boolean;\r\n  error: unknown;\r\n  crypto: string;\r\n}\r\n/**\r\n * creates indicators for loading and error\r\n * @param result  result of fetch operation\r\n * @param error possible error in fetch operation\r\n * @param crypto name of current cryptocurrency\r\n * @returns component\r\n */\r\nconst FetchStatusIndicator = (props: Props) => {\r\n  const { result, error, crypto } = props;\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  if (error) {\r\n    enqueueSnackbar(`Podczas pobierania danych bieÅ¼Ä…cych dla ${crypto} wystÄ…piÅ‚ bÅ‚Ä…d `, {\r\n      variant: \"error\",\r\n    });\r\n  }\r\n\r\n  if (!result) return <Loader />;\r\n\r\n  return null;\r\n};\r\n\r\nexport default FetchStatusIndicator;\r\n","import * as React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { /*ResultsTable,*/ FetchStatusIndicator } from \"./parts\";\r\nimport { useFetchHistoricalValues } from \"hooks\";\r\nimport { BlueButton } from \"components\";\r\nimport { CreateURL, hasDateChanged, createResults } from \"functions\";\r\nimport { ResultsType, HistoricalPrices, CryptoPrice } from \"types\";\r\nimport { initialCurrency, initialIntervalMs } from \"../../config\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\nconst ResultsTable = React.lazy(() => import(\"./parts/ResultsTable\"));\r\n\r\ninterface refType {\r\n  date: Date;\r\n  currentCryptoPrice: CryptoPrice | undefined;\r\n}\r\n\r\n/**\r\n * Presents cryptocurrency price current and historical\r\n * @returns component\r\n */\r\nconst ResultsPage = (): JSX.Element => {\r\n  const ref = React.useRef<refType>({\r\n    date: new Date(),\r\n    currentCryptoPrice: undefined,\r\n  });\r\n\r\n  const history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { currencyBase, currencyCrypto } = React.useContext(SelectedCurrenciesContext);\r\n  const intervalMs = initialIntervalMs;\r\n  const currentURL = CreateURL.current(currencyCrypto.value, currencyBase);\r\n  const [results, setResults] = React.useState<ResultsType | null>(null);\r\n\r\n  const [historicalCryptoPrice, sethistoricalCryptoPrice] = React.useState<HistoricalPrices | undefined | null>(undefined);\r\n\r\n  const { data: currentCryptoData, error: currentCryptoError } = useQuery(\r\n    \"currentCrypto\",\r\n    async () => {\r\n      if (hasDateChanged(ref.current.date)) {\r\n        //const historicalsURLsArray = CreateURL.historical(currencyCrypto, currencyBase);\r\n        fetchHistoricalValues(currencyCrypto, currencyBase);\r\n      }\r\n      const result = await axios.get(currentURL, { Apikey: process.env.REACT_APP_API_KEY });\r\n\r\n      return result.data;\r\n    },\r\n    {\r\n      refetchInterval: intervalMs,\r\n    }\r\n  );\r\n\r\n  const { data: historicalData, fetchHistoricalValues } = useFetchHistoricalValues();\r\n\r\n  const returnToSelectionPage = React.useCallback(() => {\r\n    history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    fetchHistoricalValues(currencyCrypto, currencyBase);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (currentCryptoData && historicalCryptoPrice) {\r\n      let cryptoPrice = Object.values(currentCryptoData)[0] as CryptoPrice;\r\n      if (cryptoPrice !== ref.current.currentCryptoPrice) {\r\n        ref.current.currentCryptoPrice = cryptoPrice;\r\n\r\n        typeof cryptoPrice === \"number\" &&\r\n          enqueueSnackbar(`Zmiana`, {\r\n            variant: \"success\",\r\n          });\r\n\r\n        typeof cryptoPrice === \"string\" &&\r\n          enqueueSnackbar(`Na serwerze nie ma danych o bieÅ¼Ä…cym kursie kryptowaluty`, {\r\n            variant: \"info\",\r\n          });\r\n\r\n        const result = createResults({ cryptoPrice, historicalCryptoPrice, currencyBase });\r\n        setResults(result);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentCryptoData, historicalCryptoPrice]);\r\n\r\n  React.useEffect(() => {\r\n    if (historicalData && historicalCryptoPrice !== historicalData) {\r\n      sethistoricalCryptoPrice(historicalData);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [historicalData]);\r\n\r\n  return (\r\n    <>\r\n      {(currentCryptoError || !results) && <FetchStatusIndicator crypto={currencyCrypto.label} result={Boolean(results)} error={currentCryptoError} />}\r\n      <BlueButton label=\"PowrÃ³t do wyboru\" clickHandler={returnToSelectionPage} />\r\n      {results && currencyCrypto !== initialCurrency.currencyCrypto && (\r\n        <React.Suspense fallback={null}>\r\n          <ResultsTable currencyCrypto={currencyCrypto} results={results} />\r\n        </React.Suspense>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultsPage;\r\n\r\n/**\r\n * todo wydzieliÄ‡ media query do osobnego pliku i wczytywaÄ‡ ten plik warunkowo. Ale, co sie stanie kiedy zrobimy resize?\r\n * todo rozdzieliÄ‡ ref na skÅ‚adowe bo tak bez sensu, nia majÄ… nic wspÃ³lnego\r\n * todo doczytaÄ‡ o concurrent axios\r\n * todo dobrzez przebadaÄ‡ fetch-histor brancha\r\n * todo z cryptoPrice robi siÄ™ nast rzeczy 19. zakÅ‚ada refkÄ™ o wartoÅ›ci undefined 79 ustala siÄ™ realnÄ… wartoÅ›Ä‡ 80 porÃ³wnuje z refkÄ… 81 updatuje refkÄ™\r\n */\r\n","import styled from 'styled-components';\r\n\r\nconst CryptoCurrencyPricesContainer = styled.div`\r\n    display: grid;\r\n    width: 100%;\r\n    grid-template-columns: 1.5fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n    @media (max-width: 850px) {\r\n        grid-template-columns: repeat(4, 1fr);\r\n        & :nth-child(5) {\r\n            border-left: none;\r\n        }\r\n    }\r\n    @media (max-width: 600px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n        & :nth-child(odd) {\r\n            border-left: none;\r\n        }\r\n    }\r\n\r\n    & :first-child {\r\n        @media (max-width: 1000px) {\r\n            border-left: none;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 300px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n        & * {\r\n            border-left: none;\r\n        }\r\n    }\r\n`;\r\nexport default CryptoCurrencyPricesContainer;\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst CryptoCurrencyContainer = withStyles({\r\n    root: {\r\n        width: '100%',\r\n        paddingRight: '15px',\r\n        paddingLeft: '15px',\r\n        marginRight: 'auto',\r\n        marginLeft: 'auto',\r\n        marginTop: '30vh',\r\n    },\r\n})(Box);\r\n\r\nexport default CryptoCurrencyContainer;\r\n","import styled from \"styled-components\";\r\nimport { PriceTableCell } from \"./PriceTableCell\";\r\nimport * as React from \"react\";\r\n\r\nconst CurrentPriceValue = styled.div`\r\n  font-size: 1.25rem;\r\n  color: rgb(216, 53, 80);\r\n  @media (max-width: 400px) {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\nconst CurrentPriceName = styled.div`\r\n  font-size: 10px;\r\n`;\r\n/**\r\n * Displays cell with current cryptocurrency price\r\n * @param props object with current cryptocurrency price data\r\n * @returns component\r\n */\r\ninterface Props {\r\n  currentPrice: { [key: string]: string };\r\n}\r\n\r\nconst CryptoCurrencyCurrentPrice = (props: Props) => {\r\n  const { currentPrice } = props;\r\n\r\n  return (\r\n    <PriceTableCell>\r\n      <CurrentPriceValue>{Object.values(currentPrice)[0]}</CurrentPriceValue>\r\n      <CurrentPriceName>{Object.keys(currentPrice)[0]}</CurrentPriceName>\r\n    </PriceTableCell>\r\n  );\r\n};\r\n\r\nexport default CryptoCurrencyCurrentPrice;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport parasol from \"graphics/parasol.webp\";\r\n\r\nconst GeneralInfoTitle = styled.div`\r\n  font-size: 1.25rem;\r\n  white-space: pre-wrap;\r\n  text-align: center;\r\n  color: rgb(216, 53, 80);\r\n  \r\n  @media (min-width: 1000px) {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    width: 180px;\r\n    white-space: nowrap;\r\n  }\r\n    // @media (max-width: 767px) {\r\n    //     display: block;\r\n    //     position: absolute;\r\n    //     top: -10px;\r\n    // }\r\n    // @media (min-width: 768px) and (max-width:1200px) {\r\n    //     line-height: 1;\r\n    // }\r\n  }\r\n`;\r\nconst GeneralInfoWrapper = styled.div`\r\n  position: relative;\r\n  height: 75px;\r\n  width: 20%;\r\n  padding-left: 23px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  @media (max-width: 1000px) {\r\n    width: 100%;\r\n    display: flex;\r\n    padding: 7px 0 12px 0;\r\n    height: unset;\r\n    flex-direction: row;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n  }\r\n  @media (max-width: 400px) {\r\n    width: 100%;\r\n    display: flex;\r\n    padding: 7px 0 12px 0;\r\n    height: unset;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst altcoins_growth = \"Altcoins - hightest growth\";\r\n\r\nconst GeneralInfoAlt = styled.div`\r\n  font-size: 10px;\r\n  display: block;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    width: 7px;\r\n    height: 7px;\r\n    border-radius: 100%;\r\n    margin: 4px 5px 0 0;\r\n    float: left;\r\n    background-color: #ffbe33;\r\n  }\r\n`;\r\n\r\nconst GeneralInfoFnd = styled.div`\r\n  font-size: 10px;\r\n  display: block;\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    width: 10px;\r\n    height: 10px;\r\n    margin: 0 5px 0 -3px;\r\n    float: left;\r\n    background: url(${parasol});\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  name: string;\r\n}\r\n/**\r\n * Renders general information about cryptocurrency\r\n * @param {string} name cryptocurrency nam\r\n * @returns memoised component\r\n */\r\nconst GeneralInfo = React.memo((props: Props) => {\r\n  const { name } = props;\r\n  return (\r\n    <GeneralInfoWrapper>\r\n      <GeneralInfoTitle>{name}</GeneralInfoTitle>\r\n      <GeneralInfoFnd>{`${name} foundation`}</GeneralInfoFnd>\r\n      <GeneralInfoAlt>{altcoins_growth}</GeneralInfoAlt>\r\n    </GeneralInfoWrapper>\r\n  );\r\n});\r\n\r\nexport default GeneralInfo;\r\n","import { withStyles } from \"@material-ui/core/styles\";\r\nimport _Tooltip from \"@material-ui/core/Tooltip\";\r\n/**\r\n * Tooltip component\r\n */\r\nconst Tooltip = withStyles(() => ({\r\n  tooltip: {\r\n    backgroundColor: \"#F5C200\",\r\n    border: \"1px solid #EE760A\",\r\n    boxShadow: \"inset 0 0 5px #EE760A\",\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    fontSize: 11,\r\n  },\r\n}))(_Tooltip);\r\n\r\nexport default Tooltip;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { PriceTableCell } from \"./PriceTableCell\";\r\n\r\nimport Tooltip from \"./Tooltip\";\r\n\r\nimport oko from \"graphics/oko.webp\";\r\nimport waga from \"graphics/waga.webp\";\r\nimport waga_hover from \"graphics/wagahover.webp\";\r\nimport oko_hover from \"graphics/okohover.webp\";\r\n\r\nconst InvestWrapper = styled.div`\r\n  width: 109px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  height: 75px;\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    width: 26px;\r\n    height: 20px;\r\n    bottom: 0px;\r\n    left: 25px;\r\n    background: url(${oko});\r\n  }\r\n  &::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    width: 25px;\r\n    height: 20px;\r\n    bottom: 0px;\r\n    right: 25px;\r\n    background: url(${waga});\r\n  }\r\n  &:hover::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    width: 25px;\r\n    height: 20px;\r\n    bottom: 0px;\r\n    right: 25px;\r\n    background: url(${waga_hover});\r\n  }\r\n  &:hover::before {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    width: 25px;\r\n    height: 20px;\r\n    bottom: 0px;\r\n    right: 25px;\r\n    background: url(${oko_hover});\r\n  }\r\n`;\r\n/**\r\n * creates button which could be in the future used for investing\r\n * @returns button component\r\n */\r\nconst InvestButton = () => {\r\n  return (\r\n    <PriceTableCell>\r\n      <InvestWrapper>\r\n        <Tooltip title=\"Ta funkcjonalnoÅ›Ä‡ nie jest jeszcze zaimplementowana\" placement=\"top-start\">\r\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\">\r\n            Inwestuj\r\n          </Button>\r\n        </Tooltip>\r\n      </InvestWrapper>\r\n    </PriceTableCell>\r\n  );\r\n};\r\n\r\nexport default React.memo(InvestButton);\r\n","import * as React from \"react\";\r\n\r\ninterface Props {\r\n  URL: string;\r\n}\r\n/**\r\n * creates Logo of cryptocurrency. Firstly createscomplete URL\r\n * @param URL string being critical part of URL\r\n * @returns logo component\r\n */\r\nconst Logo = (props: Props) => {\r\n  const { URL } = props;\r\n  const cryptoLogoUrl = process.env.REACT_APP_CRYPTOS_GENERAL + URL + \"?width=30\";\r\n\r\n  return <img className=\"logo\" src={cryptoLogoUrl} alt={\"\"} aria-label={\"cryptocurrency logo image\"} />;\r\n};\r\n\r\nexport default Logo;\r\n","import styled from 'styled-components';\r\n\r\nexport const PriceTableCell = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n    height: 75px;\r\n    padding: 0 4px;\r\n    border-left: 2px solid #9db9f5;\r\n`;\r\n","import * as React from \"react\";\r\n\r\nimport { Grow } from \"@material-ui/core\";\r\n\r\nimport TableOfChanges from \"./TableOfChanges\";\r\nimport CryptoCurrencyPricesContainer from \"./CryptoCurencyPricesContainer\";\r\nimport CryptoCurrencyContainer from \"./CryptoCurrencyContainer\";\r\nimport CryptoCurrencyCurrentPrice from \"./CryptoCurrencyCurrentPrice\";\r\nimport GeneralInfo from \"./GeneralInfo\";\r\nimport InvestButton from \"./InvestButton\";\r\nimport Logo from \"./Logo\";\r\nimport { CurrencyCrypto, ResultsType } from \"types\";\r\n\r\ninterface propTypes {\r\n  currencyCrypto: CurrencyCrypto;\r\n  results: ResultsType;\r\n}\r\n/**\r\n * creates array with all provided informations about crypto\r\n * @param props\r\n * @returns\r\n */\r\nconst ResultsTable = (props: propTypes) => {\r\n  const { currencyCrypto, results } = props;\r\n\r\n  return (\r\n    <CryptoCurrencyContainer>\r\n      <Grow in={true} timeout={1000}>\r\n        <div className=\"DataContainer\">\r\n          <GeneralInfo name={currencyCrypto.label} />\r\n          {currencyCrypto.image && <Logo URL={currencyCrypto.image} />}\r\n          <CryptoCurrencyPricesContainer>\r\n            {results!.currentPrice && <CryptoCurrencyCurrentPrice currentPrice={results!.currentPrice} />}\r\n            {results!.changes && <TableOfChanges changesArray={results!.changes} />}\r\n            <InvestButton />\r\n          </CryptoCurrencyPricesContainer>\r\n        </div>\r\n      </Grow>\r\n    </CryptoCurrencyContainer>\r\n  );\r\n};\r\n\r\nexport default ResultsTable;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport uuid from \"react-uuid\";\r\n\r\nimport { ChangesArray } from \"types\";\r\nimport { PriceTableCell } from \"./PriceTableCell\";\r\n\r\nconst HistoricalValue = styled.div`\r\n  font-size: 20px;\r\n  padding: 0 3px;\r\n`;\r\nconst HistoricalName = styled.div`\r\n  font-size: 10px;\r\n`;\r\n\r\ninterface Props {\r\n  changesArray: ChangesArray;\r\n}\r\n/**\r\n * Creates table with historical price and percentage change\r\n * @param changesArray data to be displayed\r\n * @returns component with tabelarised data\r\n */\r\n\r\nconst TableOfChanges = (props: Props): JSX.Element => {\r\n  const { changesArray } = props;\r\n\r\n  return (\r\n    <>\r\n      {changesArray.map(change => (\r\n        <PriceTableCell key={uuid()}>\r\n          <HistoricalValue key={uuid()}>{Object.values(change)[0]}</HistoricalValue>\r\n          <HistoricalName key={uuid()}>{Object.keys(change)[0]}</HistoricalName>\r\n        </PriceTableCell>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableOfChanges;\r\n"],"names":["Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","CircularProgress","color","Progress","Loader","React","thickness","size","props","classes","isEnabled","clickHandler","label","className","onClick","disabled","useState","data","setData","error","setError","loading","setLoading","enqueueSnackbar","useSnackbar","historicalPrices","fatalError","useCallback","variant","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","weatherData","hasOwnProperty","push","NotAvailable","catch","err","code","response","status","fetchHistoricalValues","currencyCrypto","CreateURL","errorDictionary","Proxy","get","target","phrase","useTypedSelector","useSelector","result","crypto","ResultsTable","ref","date","Date","currentCryptoPrice","undefined","history","useHistory","SelectedCurrenciesContext","currencyBase","intervalMs","initialIntervalMs","currentURL","value","results","setResults","historicalCryptoPrice","sethistoricalCryptoPrice","useQuery","hasDateChanged","current","refetchInterval","currentCryptoData","currentCryptoError","useFetchHistoricalValues","historicalData","returnToSelectionPage","cryptoPrice","Object","values","createResults","Boolean","initialCurrency","fallback","CryptoCurrencyPricesContainer","styled","CryptoCurrencyContainer","width","paddingRight","paddingLeft","marginRight","marginLeft","marginTop","CurrentPriceValue","CurrentPriceName","currentPrice","keys","GeneralInfoTitle","GeneralInfoWrapper","GeneralInfoAlt","GeneralInfoFnd","parasol","GeneralInfo","name","tooltip","backgroundColor","border","boxShadow","fontSize","_Tooltip","InvestWrapper","oko","waga","waga_hover","oko_hover","InvestButton","PriceTableCell","title","placement","Button","cryptoLogoUrl","src","alt","in","timeout","image","changes","changesArray","HistoricalValue","HistoricalName","map","change","key","uuid"],"sourceRoot":""}