{"version":3,"file":"static/js/914.8d791c3d.chunk.js","mappings":"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","sources":["hooks/useFetchHistoricalPrices.ts","hooks/useCheckApiKey.ts","hooks/useConfirm.ts","functions/createOptions.ts","hooks/useFetchListOfCryptos.ts","hooks/useBoolean.ts","hooks/useDebouncedCallback.ts","pages/SelectionPage/components/CryptoCurrencyDescription.tsx","pages/SelectionPage/components/BaseCurrencySelectForm.tsx","pages/SelectionPage/components/CryptoCurrencySelectForm.tsx","pages/SelectionPage/components/Logo.tsx","pages/SelectionPage/SelectionPage.tsx","pages/SelectionPage/styles/BaseCurrencyForm.tsx","pages/SelectionPage/styles/Description.tsx","pages/SelectionPage/styles/Legend.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nimport { BaseCurrency, CurrencyCrypto, HistoricalPrices, NotAvailable } from \"types\";\r\nimport { CreateURL } from \"functions\";\r\nimport { useMessage, useBoolean } from \"hooks\";\r\n\r\nconst useFetchHistoricalPrices = () => {\r\n    const [data, setData] = useState<HistoricalPrices | null>(null);\r\n    const [error, setError] = useState(false);\r\n    const [loading, , stopLoading] = useBoolean(true);\r\n    const showMessage = useMessage();\r\n\r\n    let historicalPrices: HistoricalPrices = [];\r\n\r\n    const fatalError = useCallback(() => {\r\n        setError(true);\r\n        showMessage.error(`No data fetched at all for given endpoints`);\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const theEndOfRecursiveFetchLoopHandle = () => {\r\n        stopLoading();\r\n\r\n        if (historicalPrices.length) {\r\n            setData(historicalPrices);\r\n        } else {\r\n            fatalError();\r\n        }\r\n    };\r\n\r\n    const fetchData = async (endpoints: string[], baseCurrency: BaseCurrency) => {\r\n        if (endpoints.length) {\r\n            let URL = endpoints.shift();\r\n            let reducedEndpoints = [...endpoints];\r\n\r\n            URL &&\r\n                axios\r\n                    .get(URL, { Apikey: process.env.REACT_APP_API_KEY as string })\r\n                    .then(data => {\r\n                        if (data.hasOwnProperty(\"data\")) {\r\n                            if (data.data.hasOwnProperty(baseCurrency)) {\r\n                                historicalPrices.push(data.data[baseCurrency]);\r\n                            } else {\r\n                                historicalPrices.push(NotAvailable.na);\r\n                            }\r\n\r\n                            if (reducedEndpoints.length) {\r\n                                fetchData(reducedEndpoints, baseCurrency);\r\n                            } else {\r\n                                theEndOfRecursiveFetchLoopHandle();\r\n                            }\r\n                        } else {\r\n                            stopLoading();\r\n                            const label = URL ? URL : \"unknown crypto\";\r\n                            showMessage.warning(`Data for ${label} was broken, corrupted or otherwise invalid`);\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        let code = err.response ? err.response.status : err;\r\n                        showMessage.warning(`Error ${code} encountered when fetching data for ${URL}`);\r\n                        if (reducedEndpoints.length) {\r\n                            fetchData(reducedEndpoints, baseCurrency);\r\n                        } else {\r\n                            theEndOfRecursiveFetchLoopHandle();\r\n                        }\r\n                    });\r\n        } else {\r\n            setError(true);\r\n            showMessage.error(`Empty array of URLs passed to useAxiosArray as argument`);\r\n        }\r\n    };\r\n    const fetchHistoricalPrices = (currencyCrypto: CurrencyCrypto, baseCurrency: BaseCurrency) => {\r\n        fetchData(CreateURL.historical(currencyCrypto, baseCurrency), baseCurrency);\r\n    };\r\n\r\n    return { data, error, loading, fetchHistoricalPrices };\r\n};\r\n\r\nexport default useFetchHistoricalPrices;\r\n","import { useRef } from \"react\";\r\nimport { useMessage } from \"hooks\";\r\n\r\nconst useCheckApiKey = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const isAPIKeyAvailable = useRef(false);\r\n\r\n    if (!process.env.REACT_APP_API_KEY) {\r\n        showMessage.error(`No API key available for application`);\r\n    } else {\r\n        isAPIKeyAvailable.current = true;\r\n    }\r\n    return isAPIKeyAvailable.current;\r\n};\r\n\r\nexport default useCheckApiKey;\r\n","import { useContext, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BaseCurrency, CurrencyCrypto } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    currencyBase: BaseCurrency;\r\n    currencyCrypto: CurrencyCrypto;\r\n}\r\n/**\r\n * Creates button which - when clicked - accepts chosen currencies to context and switches to page wit results\r\n * @param props currency base: base currency, currencyCrypto: cryptocurrency\r\n * @returns button component\r\n */\r\nconst useConfirmChoice = (props: Props) => {\r\n    const { currencyBase, currencyCrypto } = props;\r\n    const navigate = useNavigate();\r\n    const { setCurrencyBase, setCurrencyCrypto } = useContext(SelectedCurrenciesContext);\r\n    const isEnabled = currencyBase && currencyCrypto ? true : false;\r\n    const pathToResults = isEnabled ? `exchange rate for pair ${currencyCrypto.label}:${currencyBase}` : undefined;\r\n\r\n    const confirmChoice = useCallback(() => {\r\n        setCurrencyBase(currencyBase);\r\n        setCurrencyCrypto(currencyCrypto);\r\n        if (pathToResults) navigate(pathToResults, { state: { results: pathToResults } });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pathToResults]);\r\n\r\n    return { confirmChoice, isEnabled };\r\n};\r\n\r\nexport default useConfirmChoice;\r\n","import { ApiResponse } from \"types\";\r\n/**\r\n * Takes response from list of all cryptos API and creates array with desired content\r\n * @param obj\r\n * @returns array with code, name and link to logo of all available cryptocurrencies\r\n */\r\nconst createOptions = (obj: ApiResponse) => {\r\n    const data = obj.data.Data;\r\n\r\n    const result = [];\r\n\r\n    for (let item in data) {\r\n        if (data.hasOwnProperty(item)) {\r\n            result.push({\r\n                value: item,\r\n                label: data[item].CoinName,\r\n                image: data[item].ImageUrl,\r\n                description: data[item].Description,\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default createOptions;\r\n","import axios from \"axios\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { BASE_URL } from \"config\";\r\nimport { useQuery } from \"react-query\";\r\nimport useMessage from \"./useMessage\";\r\nimport createOptions from \"functions/createOptions\";\r\nimport { ApiResponse } from \"types/types\";\r\n\r\nconst useFetchListOfCryptos = () => {\r\n    const showMessage = useMessage();\r\n\r\n    const { isLoading, error, data } = useQuery([URL], () => axios(BASE_URL.get(\"all\")), {\r\n        staleTime: 300000,\r\n        cacheTime: 300000,\r\n        select: data => createOptions(data as unknown as ApiResponse),\r\n    });\r\n\r\n    useEffect(() => {\r\n        error && showMessage.error(`Błąd pobierania listy kryptowalut`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [error]);\r\n\r\n    return { isLoading, data };\r\n};\r\n\r\nexport default useFetchListOfCryptos;\r\n","import { useCallback, useState } from \"react\";\r\n\r\nfunction useBoolean(initialValue: boolean = false) {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    function setTrue() {\r\n        setValue(true);\r\n    }\r\n\r\n    const setFalse = useCallback(() => {\r\n        setValue(false);\r\n    }, []);\r\n\r\n    const toggle = useCallback(() => {\r\n        setValue(!value);\r\n    }, [value]);\r\n\r\n    return [value, setTrue, setFalse, toggle] as const;\r\n}\r\n\r\nexport default useBoolean;\r\n","import { useCallback } from \"react\";\nimport debounce from \"lodash/debounce\";\n\nexport const useDebouncedCallback = (fn: Function, args: any): React.MouseEventHandler<HTMLButtonElement> => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const result = useCallback(\n        debounce(() => {\n            fn(args);\n        }, 200),\n        [fn]\n    );\n    return result;\n};\n\nexport default useDebouncedCallback;\n","import Paper from \"@mui/material/Paper\";\r\nimport Fade from \"@mui/material/Fade\";\r\n\r\nimport { memo } from \"react\";\r\n\r\nimport { Description } from \"../styles\";\r\n\r\ninterface Props {\r\n    description: string;\r\n}\r\nconst CryptoCurrencyDescription = (props: Props) => {\r\n    const { description } = props;\r\n\r\n    return (\r\n        <Fade in={true} timeout={1000}>\r\n            <Paper elevation={1}>\r\n                <Description>{description}</Description>\r\n            </Paper>\r\n        </Fade>\r\n    );\r\n};\r\n\r\nexport default memo(CryptoCurrencyDescription);\r\n","import Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\n\r\nimport { BaseCurrency } from \"types\";\r\nimport { BaseCurrencyForm, Legend } from \"../styles\";\r\n\r\ninterface BaseCurrencyChoiceType {\r\n    currencyBase: BaseCurrency | null;\r\n    setCurrencyBase: (arg0: BaseCurrency) => void;\r\n}\r\n/**\r\n * Creates form which alows choise of base currency\r\n * @param currencyBase base currency\r\n * @param setCurrencyBase: function which sets chosen base currency\r\n * @returns form component with radiogroup\r\n */\r\n\r\nconst BaseCurrencySelectForm = (props: BaseCurrencyChoiceType): JSX.Element => {\r\n    const { currencyBase, setCurrencyBase } = props;\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrencyBase(event.target.value as BaseCurrency);\r\n    };\r\n\r\n    return (\r\n        <BaseCurrencyForm>\r\n            <Legend> Waluta odniesienia</Legend>\r\n            <RadioGroup aria-label=\"currency\" name=\"currency\" value={currencyBase} onChange={handleChange}>\r\n                <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n                <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n                <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n            </RadioGroup>\r\n        </BaseCurrencyForm>\r\n    );\r\n};\r\n\r\nexport default BaseCurrencySelectForm;\r\n","import * as React from \"react\";\r\nimport VirtualizedSelect from \"react-virtualized-select\";\r\n\r\nimport { CurrencyCrypto } from \"types\";\r\nimport { useFetchListOfCryptos } from \"hooks\";\r\nimport Loader from \"components/Loader/Loader\";\r\n\r\nimport \"../styles/_CryptoCurrencySelectForm.scss\";\r\n\r\ninterface Props {\r\n    setCurrencyCrypto: (arg0: CurrencyCrypto) => void;\r\n    currencyCrypto: CurrencyCrypto | undefined;\r\n}\r\n/**\r\n * Creates form which alows choise of cryptocurrency\r\n * @param currencyCrypto base currency\r\n * @param setCurrencyCrypto function which sets chosen base currency\r\n * @returns form component with radiogroup or null if list of cryptos is not available\r\n */\r\nconst CryptoCurrencySelectForm: React.FC<Props> = props => {\r\n    const { currencyCrypto, setCurrencyCrypto } = props;\r\n    const { isLoading, data: cryptos } = useFetchListOfCryptos();\r\n    const style = cryptos && cryptos.length ? \"\" : \"inactivatedSelect\";\r\n\r\n    return (\r\n        <>\r\n            <label className={style}>\r\n                <VirtualizedSelect\r\n                    value={currencyCrypto}\r\n                    className=\"virtualized-select\"\r\n                    placeholder=\"Wybierz kryptowalutę\"\r\n                    onChange={(selectValue: CurrencyCrypto) => {\r\n                        setCurrencyCrypto(selectValue);\r\n                    }}\r\n                    options={cryptos}\r\n                />\r\n            </label>\r\n            {isLoading && <Loader />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CryptoCurrencySelectForm;\r\n","import { memo } from \"react\";\r\n\r\nimport \"../styles/_logo.scss\";\r\n\r\nconst Logo = memo(() => (\r\n    <header className=\"logo\">\r\n        <h1>CryptoCurrency Tracker</h1>\r\n    </header>\r\n));\r\n\r\nexport default Logo;\r\n","import { lazy, useState, Suspense } from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\n\r\nimport { BlueButton } from \"components\";\r\nimport { BaseCurrency, CurrencyCrypto, UseConfirmChoice } from \"types\";\r\nimport { useCheckApiKey, useConfirmChoice, useDebouncedCallback } from \"hooks\";\r\nimport { CryptoCurrencySelectForm, BaseCurrencySelectForm, Logo } from \"./components\";\r\n\r\nconst Description = lazy(() => import(\"./components/CryptoCurrencyDescription\"));\r\n\r\nconst SelectionPage = () => {\r\n    const isApiKeyAvailable = useCheckApiKey();\r\n    const [currencyBase, setCurrencyBase] = useState<BaseCurrency | null>(null);\r\n    const [currencyCrypto, setCurrencyCrypto] = useState<CurrencyCrypto | undefined>(undefined);\r\n    const { confirmChoice, isEnabled } = useConfirmChoice({ currencyBase, currencyCrypto } as UseConfirmChoice);\r\n\r\n    const handleClick = useDebouncedCallback(confirmChoice, undefined);\r\n\r\n    if (!isApiKeyAvailable) return null;\r\n    return (\r\n        <main>\r\n            <Stack spacing={2} sx={{ alignItems: \"center\" }}>\r\n                <Logo />\r\n                <BlueButton\r\n                    classes={isEnabled ? \"enabled\" : \"\"}\r\n                    isEnabled={isEnabled}\r\n                    clickHandler={handleClick}\r\n                    label=\"Pokaż kurs\"\r\n                />\r\n\r\n                <BaseCurrencySelectForm currencyBase={currencyBase} setCurrencyBase={setCurrencyBase} />\r\n                <CryptoCurrencySelectForm\r\n                    currencyCrypto={currencyCrypto}\r\n                    setCurrencyCrypto={setCurrencyCrypto}\r\n                    aria-label=\"Wybierz kryptowalutę\"\r\n                />\r\n                {currencyCrypto?.description && (\r\n                    <Suspense fallback={null}>\r\n                        <Description description={currencyCrypto.description} />\r\n                    </Suspense>\r\n                )}\r\n            </Stack>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default SelectionPage;\r\n","import Form from \"@mui/material/FormControl\";\n\nimport { styled } from \"@mui/system\";\n\nexport const BaseCurrencyForm = styled(Form)(({ theme }) => ({\n    borderRadius: \"2px\",\n    animation: \"fade_in 0.1s ease-in-out forwards\",\n    border: `2px solid`,\n    borderColor: theme.palette.secondary.main,\n    padding: theme.spacing(2.5),\n    width: \"300px\",\n    boxShadow: `inset 0 0 5px ${theme.palette.secondary.light}, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)`,\n    backgroundColor: theme.palette.secondary.light,\n    color: theme.palette.common.white,\n    tabIndex: \"0\",\n    \"&:hover\": { borderColor: theme.palette.primary.main },\n    \"& .MuiFormLabel-root\": { color: \"white\", fontFamily: '\"Lato\", sans-serif', paddingBottom: theme.spacing(0.6) },\n    \"& .MuiFormGroup-root\": { flexDirection: \"row\", justifyContent: \"space-around\" },\n}));\n\nexport default BaseCurrencyForm;\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\n\nexport const Description = styled(Box)(({ theme }) => ({\n    backgroundColor: theme.palette.primary.light,\n    width: \"300px\",\n    color: theme.palette.common.white,\n    borderRadius: 1,\n    padding: theme.spacing(2),\n    border: \"2px solid\",\n    borderColor: theme.palette.primary.dark,\n    boxShadow: `inset 0 0 5px ${theme.palette.primary.dark}, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)`,\n}));\nexport default Description;\n","import FormLabel from \"@mui/material/FormLabel\";\nimport { styled } from \"@mui/system\";\n\nexport const Legend = styled(FormLabel)(({ theme }) => ({\n    textAlign: \"center\",\n    color: theme.palette.common.white,\n    \"&:focus\": { color: theme.palette.common.white },\n    \"&.Mui-focused\": { color: theme.palette.common.white },\n}));\n\nexport default Legend;\n"],"names":["useState","data","setData","error","setError","useBoolean","loading","stopLoading","showMessage","useMessage","historicalPrices","fatalError","useCallback","theEndOfRecursiveFetchLoopHandle","length","fetchData","endpoints","baseCurrency","URL","shift","reducedEndpoints","axios","Apikey","process","then","hasOwnProperty","push","NotAvailable","label","warning","catch","err","code","response","status","fetchHistoricalPrices","currencyCrypto","CreateURL","isAPIKeyAvailable","useRef","current","props","currencyBase","navigate","useNavigate","useContext","SelectedCurrenciesContext","setCurrencyBase","setCurrencyCrypto","isEnabled","pathToResults","undefined","confirmChoice","state","results","obj","Data","result","item","value","CoinName","image","ImageUrl","description","Description","useQuery","BASE_URL","staleTime","cacheTime","select","createOptions","isLoading","useEffect","initialValue","setValue","setFalse","toggle","fn","args","debounce","CryptoCurrencyDescription","in","timeout","elevation","memo","RadioGroup","name","onChange","event","target","FormControlLabel","control","Radio","useFetchListOfCryptos","cryptos","style","className","placeholder","selectValue","options","Loader","lazy","isApiKeyAvailable","useCheckApiKey","useConfirmChoice","handleClick","useDebouncedCallback","Stack","spacing","sx","alignItems","classes","clickHandler","Suspense","fallback","styled","Form","theme","borderRadius","animation","border","borderColor","palette","secondary","main","padding","width","boxShadow","light","backgroundColor","color","common","white","tabIndex","primary","fontFamily","paddingBottom","flexDirection","justifyContent","Box","dark","FormLabel","textAlign"],"sourceRoot":""}