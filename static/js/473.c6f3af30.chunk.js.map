{"version":3,"file":"static/js/473.c6f3af30.chunk.js","mappings":"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","sources":["pages/ResultsPage/ResultsPage.tsx","pages/ResultsPage/parts/ResultsTable.tsx","pages/ResultsPage/parts/CryptoCurrencyCurrentPrice.tsx","pages/ResultsPage/parts/GeneralInformation.tsx","pages/ResultsPage/parts/InvestButton.tsx","pages/ResultsPage/parts/Logo.tsx","pages/ResultsPage/parts/Changes.tsx","pages/ResultsPage/parts/ResultsPageHeader.tsx","pages/ResultsPage/parts/styles.tsx"],"sourcesContent":["import * as React from \"react\";\r\n\r\nimport {\r\n    useFetchHistoricalPrices,\r\n    useContinuouslyFetchCurrentCryptoPriceButHistoricalPricesOnlyWhenNeeded,\r\n    useCreateAggregatedResults,\r\n    useSetInitialHistoricalPrices,\r\n    useReturnToSelection,\r\n} from \"hooks\";\r\n\r\nimport { BlueButton } from \"components\";\r\n\r\nimport { ResultsPageHeader } from \"./parts\";\r\n\r\nconst ResultsTable = React.lazy(() => import(\"./parts/ResultsTable\"));\r\n\r\n/**\r\n * Presents cryptocurrency price current and historical\r\n * @returns component\r\n */\r\nconst ResultsPage = (): JSX.Element => {\r\n    const returnToSelection = useReturnToSelection();\r\n    const isInitialRender = React.useRef(true);\r\n    const { historicalCryptoPrice, fetchHistoricalPrices } = useFetchHistoricalPrices();\r\n    const { cryptoCurrencyPriceAPIResponse } =\r\n        useContinuouslyFetchCurrentCryptoPriceButHistoricalPricesOnlyWhenNeeded();\r\n\r\n    useSetInitialHistoricalPrices(fetchHistoricalPrices);\r\n\r\n    const aggregatedResults = useCreateAggregatedResults(\r\n        cryptoCurrencyPriceAPIResponse,\r\n        historicalCryptoPrice,\r\n        isInitialRender\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <ResultsPageHeader text=\"Results of query\" />\r\n            <main>\r\n                {aggregatedResults && <BlueButton label=\"Powrót do wyboru\" clickHandler={returnToSelection} />}\r\n                {aggregatedResults && (\r\n                    <React.Suspense fallback={null}>\r\n                        <ResultsTable results={aggregatedResults} />\r\n                    </React.Suspense>\r\n                )}\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ResultsPage;\r\n","import \"../styles/_ResultsTable.scss\";\r\n\r\nimport React from \"react\";\r\n\r\nimport { Grow } from \"@mui/material\";\r\n\r\nimport { Changes, CryptoCurrencyCurrentPrice, GeneralInformation, InvestButton, Logo } from \".\";\r\nimport { CryptoContainer } from \"./styles\";\r\nimport { AggregatedResults } from \"types\";\r\nimport { SelectedCurrenciesContext } from \"contexts/currenciesContext\";\r\n\r\ninterface Props {\r\n    results: AggregatedResults;\r\n}\r\n/**\r\n * creates array with all provided informations about crypto\r\n * @param props\r\n * @returns\r\n */\r\nconst ResultsTable = (props: Props) => {\r\n    const { results } = props;\r\n    const {\r\n        currencyCrypto: { label, imageURL },\r\n    } = React.useContext(SelectedCurrenciesContext);\r\n\r\n    return (\r\n        <CryptoContainer>\r\n            <Grow in={true} timeout={1000}>\r\n                <section className=\"DataContainer\" aria-label=\"query data\">\r\n                    <GeneralInformation currencyCryptoName={label} />\r\n                    {imageURL && <Logo imageURL={imageURL} />}\r\n                    <div className=\"PricesWithButtons\">\r\n                        {results!.currentPrice && <CryptoCurrencyCurrentPrice currentPrice={results!.currentPrice} />}\r\n                        {results!.changes && <Changes changesArray={results!.changes} />}\r\n                        <InvestButton />\r\n                    </div>\r\n                </section>\r\n            </Grow>\r\n        </CryptoContainer>\r\n    );\r\n};\r\n\r\nexport default ResultsTable;\r\n","import { Typography } from \"@mui/material\";\r\nimport \"../styles/_CurrentPrice.scss\";\r\n\r\n/**\r\n * Displays cell with current cryptocurrency price\r\n * @param props object with current cryptocurrency price data\r\n * @returns component\r\n */\r\ninterface Props {\r\n    currentPrice: { [key: string]: string };\r\n}\r\n\r\nconst CurrentPrice = (props: Props) => {\r\n    const { currentPrice } = props;\r\n\r\n    return (\r\n        <div className=\"cell\">\r\n            <Typography variant=\"purpleText\">{Object.values(currentPrice)[0]}</Typography>\r\n            <Typography variant=\"greyText\">{Object.keys(currentPrice)[0]}</Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentPrice;\r\n","import { memo } from \"react\";\r\nimport \"../styles/_generalInformation.scss\";\r\n\r\ninterface Props {\r\n    currencyCryptoName: string;\r\n}\r\n/**\r\n * Renders general information about cryptocurrency\r\n * @param {string} name cryptocurrency nam\r\n * @returns memoised component\r\n */\r\nconst GeneralInfo = memo((props: Props) => {\r\n    const { currencyCryptoName } = props;\r\n    return (\r\n        <div className=\"GeneralInformation\">\r\n            <div className=\"title\">{currencyCryptoName}</div>\r\n            <div className=\"foundation\">{`${currencyCryptoName} foundation`}</div>\r\n            <div className=\"altcoins\">Altcoins - hightest growth</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GeneralInfo;\r\n","import Button from \"@mui/material/Button\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\n\r\nimport { memo } from \"react\";\r\n\r\nimport \"../styles/_InvestButton.scss\";\r\n\r\nconst tooltipStyle = {\r\n    backgroundColor: \"#F5C200\",\r\n    border: `1px solid \"#EE760A\"`,\r\n    boxShadow: `inset 0 0 5px \"#EE760A\"`,\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    fontSize: 11,\r\n};\r\n\r\n/**\r\n * creates button which could be in the future used for investing\r\n * @returns button component\r\n */\r\nconst InvestButton = () => {\r\n    return (\r\n        <div className=\"cell\">\r\n            <div className=\"InvestWrapper\">\r\n                <Tooltip\r\n                    componentsProps={{ tooltip: { sx: tooltipStyle } }}\r\n                    title=\"Ta funkcjonalność nie jest jeszcze zaimplementowana\"\r\n                    placement=\"top-start\"\r\n                >\r\n                    <Button variant=\"contained\" color=\"error\" size=\"small\">\r\n                        Inwestuj\r\n                    </Button>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(InvestButton);\r\n","import { BASE_URL } from \"config\";\r\n\r\ninterface Props {\r\n    imageURL: string;\r\n}\r\n/**\r\n * creates Logo of cryptocurrency. Firstly createscomplete URL\r\n * @param URL string being critical part of URL\r\n * @returns logo component\r\n */\r\nconst Logo = (props: Props) => {\r\n    const { imageURL } = props;\r\n\r\n    const cryptoLogoUrl = BASE_URL.get(\"general\") + imageURL + \"?width=30\";\r\n\r\n    return <img className=\"logo\" src={cryptoLogoUrl} alt={\"Logo\"} />;\r\n};\r\n\r\nexport default Logo;\r\n","import uuid from \"react-uuid\";\r\n\r\nimport { Typography } from \"@mui/material\";\r\n\r\nimport { ChangesArray } from \"types\";\r\n\r\ninterface Props {\r\n    changesArray: ChangesArray;\r\n}\r\n/**\r\n * Creates table with historical price and percentage change\r\n * @param changesArray data to be displayed\r\n * @returns component with tabelarised data\r\n */\r\n\r\nconst Changes = (props: Props): JSX.Element => {\r\n    const { changesArray } = props;\r\n\r\n    return (\r\n        <>\r\n            {changesArray.map(change => (\r\n                <div className=\"cell\" key={uuid()}>\r\n                    <Typography variant=\"purpleText\" key={uuid()}>\r\n                        {Object.values(change)[0]}\r\n                    </Typography>\r\n\r\n                    <Typography variant=\"greyText\" key={uuid()}>\r\n                        {Object.keys(change)[0]}\r\n                    </Typography>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Changes;\r\n","import React from \"react\";\n\ninterface Props {\n    text: string;\n}\n\nexport const ResultsPageHeader = (props: Props) => {\n    const { text } = props;\n    return (\n        <h1 role=\"banner\" className=\"sr-only\">\n            {text}\n        </h1>\n    );\n};\n\nexport default React.memo(ResultsPageHeader);\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\n\nexport const CryptoContainer = styled(Box)(({ theme }) => ({\n    width: \"100%\",\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    marginTop: \"30vh\",\n}));\nexport default CryptoContainer;\n"],"names":["ResultsTable","React","returnToSelection","useReturnToSelection","isInitialRender","historicalCryptoPrice","fetchHistoricalPrices","useFetchHistoricalPrices","cryptoCurrencyPriceAPIResponse","useContinuouslyFetchCurrentCryptoPriceButHistoricalPricesOnlyWhenNeeded","useSetInitialHistoricalPrices","aggregatedResults","useCreateAggregatedResults","text","label","clickHandler","fallback","results","props","currencyCrypto","imageURL","SelectedCurrenciesContext","Grow","in","timeout","className","currencyCryptoName","currentPrice","changes","changesArray","Typography","variant","Object","values","keys","memo","tooltipStyle","backgroundColor","border","boxShadow","color","fontSize","InvestButton","Tooltip","componentsProps","tooltip","sx","title","placement","Button","size","cryptoLogoUrl","BASE_URL","src","alt","map","change","uuid","ResultsPageHeader","role","CryptoContainer","styled","Box","theme","width","paddingRight","spacing","paddingLeft","marginRight","marginLeft","marginTop"],"sourceRoot":""}